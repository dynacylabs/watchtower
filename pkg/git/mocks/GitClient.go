// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/nicholas-fedor/watchtower/pkg/git"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGitClient creates a new instance of MockGitClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitClient {
	mock := &MockGitClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGitClient is an autogenerated mock type for the GitClient type
type MockGitClient struct {
	mock.Mock
}

type MockGitClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitClient) EXPECT() *MockGitClient_Expecter {
	return &MockGitClient_Expecter{mock: &_m.Mock}
}

// GetLatestCommit provides a mock function for the type MockGitClient
func (_mock *MockGitClient) GetLatestCommit(ctx context.Context, repoURL string, ref string, auth git.AuthConfig) (string, error) {
	ret := _mock.Called(ctx, repoURL, ref, auth)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCommit")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, git.AuthConfig) (string, error)); ok {
		return returnFunc(ctx, repoURL, ref, auth)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, git.AuthConfig) string); ok {
		r0 = returnFunc(ctx, repoURL, ref, auth)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, git.AuthConfig) error); ok {
		r1 = returnFunc(ctx, repoURL, ref, auth)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitClient_GetLatestCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestCommit'
type MockGitClient_GetLatestCommit_Call struct {
	*mock.Call
}

// GetLatestCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - repoURL string
//   - ref string
//   - auth git.AuthConfig
func (_e *MockGitClient_Expecter) GetLatestCommit(ctx interface{}, repoURL interface{}, ref interface{}, auth interface{}) *MockGitClient_GetLatestCommit_Call {
	return &MockGitClient_GetLatestCommit_Call{Call: _e.mock.On("GetLatestCommit", ctx, repoURL, ref, auth)}
}

func (_c *MockGitClient_GetLatestCommit_Call) Run(run func(ctx context.Context, repoURL string, ref string, auth git.AuthConfig)) *MockGitClient_GetLatestCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 git.AuthConfig
		if args[3] != nil {
			arg3 = args[3].(git.AuthConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockGitClient_GetLatestCommit_Call) Return(s string, err error) *MockGitClient_GetLatestCommit_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockGitClient_GetLatestCommit_Call) RunAndReturn(run func(ctx context.Context, repoURL string, ref string, auth git.AuthConfig) (string, error)) *MockGitClient_GetLatestCommit_Call {
	_c.Call.Return(run)
	return _c
}

// ListBranches provides a mock function for the type MockGitClient
func (_mock *MockGitClient) ListBranches(ctx context.Context, repoURL string, auth git.AuthConfig) ([]string, error) {
	ret := _mock.Called(ctx, repoURL, auth)

	if len(ret) == 0 {
		panic("no return value specified for ListBranches")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, git.AuthConfig) ([]string, error)); ok {
		return returnFunc(ctx, repoURL, auth)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, git.AuthConfig) []string); ok {
		r0 = returnFunc(ctx, repoURL, auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, git.AuthConfig) error); ok {
		r1 = returnFunc(ctx, repoURL, auth)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitClient_ListBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBranches'
type MockGitClient_ListBranches_Call struct {
	*mock.Call
}

// ListBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - repoURL string
//   - auth git.AuthConfig
func (_e *MockGitClient_Expecter) ListBranches(ctx interface{}, repoURL interface{}, auth interface{}) *MockGitClient_ListBranches_Call {
	return &MockGitClient_ListBranches_Call{Call: _e.mock.On("ListBranches", ctx, repoURL, auth)}
}

func (_c *MockGitClient_ListBranches_Call) Run(run func(ctx context.Context, repoURL string, auth git.AuthConfig)) *MockGitClient_ListBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 git.AuthConfig
		if args[2] != nil {
			arg2 = args[2].(git.AuthConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGitClient_ListBranches_Call) Return(strings []string, err error) *MockGitClient_ListBranches_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockGitClient_ListBranches_Call) RunAndReturn(run func(ctx context.Context, repoURL string, auth git.AuthConfig) ([]string, error)) *MockGitClient_ListBranches_Call {
	_c.Call.Return(run)
	return _c
}

// ListTags provides a mock function for the type MockGitClient
func (_mock *MockGitClient) ListTags(ctx context.Context, repoURL string, auth git.AuthConfig) ([]string, error) {
	ret := _mock.Called(ctx, repoURL, auth)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, git.AuthConfig) ([]string, error)); ok {
		return returnFunc(ctx, repoURL, auth)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, git.AuthConfig) []string); ok {
		r0 = returnFunc(ctx, repoURL, auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, git.AuthConfig) error); ok {
		r1 = returnFunc(ctx, repoURL, auth)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGitClient_ListTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTags'
type MockGitClient_ListTags_Call struct {
	*mock.Call
}

// ListTags is a helper method to define mock.On call
//   - ctx context.Context
//   - repoURL string
//   - auth git.AuthConfig
func (_e *MockGitClient_Expecter) ListTags(ctx interface{}, repoURL interface{}, auth interface{}) *MockGitClient_ListTags_Call {
	return &MockGitClient_ListTags_Call{Call: _e.mock.On("ListTags", ctx, repoURL, auth)}
}

func (_c *MockGitClient_ListTags_Call) Run(run func(ctx context.Context, repoURL string, auth git.AuthConfig)) *MockGitClient_ListTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 git.AuthConfig
		if args[2] != nil {
			arg2 = args[2].(git.AuthConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGitClient_ListTags_Call) Return(strings []string, err error) *MockGitClient_ListTags_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockGitClient_ListTags_Call) RunAndReturn(run func(ctx context.Context, repoURL string, auth git.AuthConfig) ([]string, error)) *MockGitClient_ListTags_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRepository provides a mock function for the type MockGitClient
func (_mock *MockGitClient) ValidateRepository(ctx context.Context, repoURL string, auth git.AuthConfig) error {
	ret := _mock.Called(ctx, repoURL, auth)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRepository")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, git.AuthConfig) error); ok {
		r0 = returnFunc(ctx, repoURL, auth)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGitClient_ValidateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRepository'
type MockGitClient_ValidateRepository_Call struct {
	*mock.Call
}

// ValidateRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - repoURL string
//   - auth git.AuthConfig
func (_e *MockGitClient_Expecter) ValidateRepository(ctx interface{}, repoURL interface{}, auth interface{}) *MockGitClient_ValidateRepository_Call {
	return &MockGitClient_ValidateRepository_Call{Call: _e.mock.On("ValidateRepository", ctx, repoURL, auth)}
}

func (_c *MockGitClient_ValidateRepository_Call) Run(run func(ctx context.Context, repoURL string, auth git.AuthConfig)) *MockGitClient_ValidateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 git.AuthConfig
		if args[2] != nil {
			arg2 = args[2].(git.AuthConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockGitClient_ValidateRepository_Call) Return(err error) *MockGitClient_ValidateRepository_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGitClient_ValidateRepository_Call) RunAndReturn(run func(ctx context.Context, repoURL string, auth git.AuthConfig) error) *MockGitClient_ValidateRepository_Call {
	_c.Call.Return(run)
	return _c
}
