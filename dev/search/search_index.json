{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Watchtower  <p>   A solution for automating Docker container image updates </p>"},{"location":"advanced-features/http-api/","title":"HTTP API","text":""},{"location":"advanced-features/http-api/#overview","title":"Overview","text":"<p>Watchtower has an optional HTTP API server.</p> <p>Caution</p> <p>This is a relatively simple API with significant security implications.</p>"},{"location":"advanced-features/http-api/#endpoints","title":"Endpoints","text":"Name Endpoint Parameters Description Update <code>/v1/update</code> <code>image</code> Triggers an update of containers monitored by the Watchtower instance Metrics <code>/v1/metrics</code> Provides container scan and update information that's typically only seen via logging"},{"location":"advanced-features/http-api/#http_api_update","title":"HTTP API Update","text":"<p>To enable this mode, use the <code>--http-api-update</code> CLI argument or the <code>WATCHTOWER_HTTP_API_UPDATE</code> environment variable.</p>"},{"location":"advanced-features/http-api/#requirements","title":"Requirements","text":""},{"location":"advanced-features/http-api/#authentication","title":"Authentication","text":"<p>Watchtower uses token-based, header authentication for the HTTP API.</p> <p>This should be set using the HTTP API Token configuration option.</p> <p>All requests to the <code>/v1/update</code> endpoint will require a <code>Token</code> field in the request header with the predefined HTTP API token value.</p>"},{"location":"advanced-features/http-api/#port_configuration","title":"Port Configuration","text":"<p>Watchtower defaults to using port 8080. If port 8080 is used by another service, then it can be changed by using the HTTP API Port configuration option.</p> <p>Alternatively, if Watchtower is being run via a Docker container, then the <code>host:container</code> port mapping can be updated accordingly (e.g. <code>8080:8080</code> -&gt; <code>9000:8080</code>).</p>"},{"location":"advanced-features/http-api/#image_parameter_usage","title":"Image Parameter Usage","text":"<p>Watchtower supports using the <code>image</code> URL query parameter to filter updates for only certain images.</p>"},{"location":"advanced-features/http-api/#no_image_filtering","title":"No Image Filtering","text":"<p>The following <code>curl</code> command would trigger an update of all container images monitored by Watchtower:</p> <pre><code>curl -H \"Authorization: Bearer mytoken\" localhost:8080/v1/update\n</code></pre>"},{"location":"advanced-features/http-api/#image_filtering_with_tags","title":"Image Filtering with Tags","text":"<p>You can specify image tags to target containers running a specific version (e.g., <code>foo/bar:1.0</code>).</p> <p>For example, to update only containers using <code>foo/bar:1.0</code> and <code>foo/baz:latest</code>:</p> <pre><code>curl -H \"Authorization: Bearer mytoken\" localhost:8080/v1/update?image=foo/bar:1.0,foo/baz:latest\n</code></pre>"},{"location":"advanced-features/http-api/#image_filtering_without_tags","title":"Image Filtering without Tags","text":"<p>If no tag is provided, Watchtower matches containers regardless of their tag.</p> <p>The following <code>curl</code> command would trigger an update for the images <code>foo/bar</code> and <code>foo/baz</code>:</p> <pre><code>curl -H \"Authorization: Bearer mytoken\" localhost:8080/v1/update?image=foo/bar,foo/baz\n</code></pre>"},{"location":"advanced-features/http-api/#scheduled_updates","title":"Scheduled Updates","text":"<p>By default, enabling this mode prevents periodic polls (i.e. scheduled or interval polling). Use the HTTP API Periodic Polls configuration option to allow both API-triggered and scheduled updates.</p>"},{"location":"advanced-features/http-api/#example","title":"Example","text":"Example Docker Compose Configuration<pre><code>services:\n  app-monitored-by-watchtower:\n    image: myapps/monitored-by-watchtower\n    labels:\n      - \"com.centurylinklabs.watchtower.enable=true\"\n\n  watchtower:\n    image: nickfedor/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    command: --http-api-update\n    environment:\n      - WATCHTOWER_HTTP_API_TOKEN=mytoken\n    labels:\n      - \"com.centurylinklabs.watchtower.enable=false\"\n    ports:\n      - 8080:8080\n    restart: unless-stopped\n</code></pre>"},{"location":"advanced-features/lifecycle-hooks/","title":"Lifecycle Hooks","text":""},{"location":"advanced-features/lifecycle-hooks/#executing_commands_before_and_after_updating","title":"Executing commands before and after updating","text":"<p>Important</p> <p>These are shell commands executed with <code>sh</code>, and therefore require the container to provide the <code>sh</code> executable.</p> <p>Note</p> <p>If the container is not running, lifecycle hooks (including pre-update hooks) cannot run, as the stop phase is skipped, and the update proceeds directly to removal (if applicable) or completion.</p> <p>It is possible to execute pre/post-check and pre/post-update commands inside every container updated by watchtower.</p> <ul> <li>The pre-check command is executed for each container prior to every update cycle.</li> <li>The pre-update command is executed before stopping the container when an update is about to start.</li> <li>The post-update command is executed after restarting the updated container</li> <li>The post-check command is executed for each container post every update cycle.</li> </ul> <p>This feature is disabled by default. To enable it, you need to set the option <code>--enable-lifecycle-hooks</code> on the command line, or set the environment variable <code>WATCHTOWER_LIFECYCLE_HOOKS</code> to <code>true</code>.</p>"},{"location":"advanced-features/lifecycle-hooks/#specifying_update_commands","title":"Specifying update commands","text":"<p>The commands are specified using docker container labels, the following are currently available:</p> Type Docker Container Label Pre Check <code>com.centurylinklabs.watchtower.lifecycle.pre-check</code> Pre Update <code>com.centurylinklabs.watchtower.lifecycle.pre-update</code> Post Update <code>com.centurylinklabs.watchtower.lifecycle.post-update</code> Post Check <code>com.centurylinklabs.watchtower.lifecycle.post-check</code> <p>These labels can be declared as instructions in a Dockerfile (with some example .sh files) or be specified as part of the <code>docker run</code> command line:</p> Dockerfiledocker run <pre><code>LABEL com.centurylinklabs.watchtower.lifecycle.pre-check=\"/sync.sh\"\nLABEL com.centurylinklabs.watchtower.lifecycle.pre-update=\"/dump-data.sh\"\nLABEL com.centurylinklabs.watchtower.lifecycle.post-update=\"/restore-data.sh\"\nLABEL com.centurylinklabs.watchtower.lifecycle.post-check=\"/send-heartbeat.sh\"\n</code></pre> <pre><code>docker run -d \\\n--label=com.centurylinklabs.watchtower.lifecycle.pre-check=\"/sync.sh\" \\\n--label=com.centurylinklabs.watchtower.lifecycle.pre-update=\"/dump-data.sh\" \\\n--label=com.centurylinklabs.watchtower.lifecycle.post-update=\"/restore-data.sh\" \\\nsomeimage --label=com.centurylinklabs.watchtower.lifecycle.post-check=\"/send-heartbeat.sh\" \\\n</code></pre>"},{"location":"advanced-features/lifecycle-hooks/#environment_variables","title":"Environment Variables","text":"<p>Lifecycle hook commands have access to container metadata through the <code>WT_CONTAINER</code> environment variable. This variable contains a JSON object with information about the container being updated:</p> <pre><code>{\n  \"name\": \"my-container\",\n  \"id\": \"abc123def456\",\n  \"image_name\": \"nginx:latest\",\n  \"stop_signal\": \"SIGTERM\",\n  \"labels\": {\n    \"com.centurylinklabs.watchtower.lifecycle.pre-update\": \"/custom-stop.sh\"\n  }\n}\n</code></pre> <p>This allows scripts to access container-specific information for custom logic, such as implementing vendor-specific stop procedures.</p>"},{"location":"advanced-features/lifecycle-hooks/#example_custom_stop_command_for_synology_dsm","title":"Example: Custom stop command for Synology DSM","text":"<pre><code>#!/bin/sh\n# Parse container name from WT_CONTAINER\nCONTAINER_NAME=$(echo $WT_CONTAINER | jq -r '.name')\n\n# Use Synology API to stop container properly\nsynowebapi --exec api=SYNO.Docker.Container method=\"stop\" name=\"$CONTAINER_NAME\"\n</code></pre>"},{"location":"advanced-features/lifecycle-hooks/#timeouts","title":"Timeouts","text":"<p>The timeout for all lifecycle commands is 60 seconds. After that, a timeout will occur, forcing Watchtower to continue the update loop.</p>"},{"location":"advanced-features/lifecycle-hooks/#pre-_or_post-update_timeouts","title":"Pre- or Post-update timeouts","text":"<p>For the <code>pre-update</code> or <code>post-update</code> lifecycle command, it is possible to override this timeout to allow the script to finish before forcefully killing it. This is done by adding the label <code>com.centurylinklabs.watchtower.lifecycle.pre-update-timeout</code> or post-update-timeout respectively followed by the timeout expressed in minutes.</p> <p>If the label value is explicitly set to <code>0</code>, the timeout will be disabled.</p>"},{"location":"advanced-features/lifecycle-hooks/#execution_failure","title":"Execution failure","text":"<p>The failure of a command to execute, identified by an exit code different than 0 or 75 (EX_TEMPFAIL), will not prevent watchtower from updating the container. Only an error log statement containing the exit code will be reported.</p>"},{"location":"advanced-features/linked-containers/","title":"Linked Containers","text":"<p>Watchtower will detect if there are links between any of the running containers and ensures that things are stopped/started in a way that won't break any of the links. If an update is detected for one of the dependencies in a group of linked containers, watchtower will stop and start all of the containers in the correct order so that the application comes back up correctly.</p> <p>For example, imagine you were running a mysql container and a wordpress container which had been linked to the mysql container. If watchtower were to detect that the mysql container required an update, it would first shut down the linked wordpress container followed by the mysql container. When restarting the containers it would handle mysql first and then wordpress to ensure that the link continued to work.</p> <p>If you want to override existing links, or if you are not using links, you can use special <code>com.centurylinklabs.watchtower.depends-on</code> label with dependent container names, separated by a comma.</p> <p>When you have a depending container that is using <code>network_mode: service:container</code> then watchtower will treat that container as an implicit link.</p>"},{"location":"advanced-features/metrics/","title":"Metrics","text":"<p>Experimental feature</p> <p>This feature was added in v1.0.4 and is still considered experimental. If you notice any strange behavior, please raise a ticket in the repository issues.</p> <p>Metrics can be used to track how Watchtower behaves over time.</p> <p>To use this feature, you have to set an API token and enable the metrics API, as well as creating a port mapping for your container for port <code>8080</code>.</p> <p>The metrics API endpoint is <code>/v1/metrics</code>.</p>"},{"location":"advanced-features/metrics/#available_metrics","title":"Available Metrics","text":"Name Type Description <code>watchtower_containers_scanned</code> Gauge Number of containers scanned for changes by watchtower during the last scan <code>watchtower_containers_updated</code> Gauge Number of containers updated by watchtower during the last scan <code>watchtower_containers_failed</code> Gauge Number of containers where update failed during the last scan <code>watchtower_scans_total</code> Counter Number of scans since the watchtower started <code>watchtower_scans_skipped</code> Counter Number of skipped scans since watchtower started"},{"location":"advanced-features/metrics/#example_prometheus_scrape_config","title":"Example Prometheus <code>scrape_config</code>","text":"<pre><code>scrape_configs:\n  - job_name: watchtower\n    scrape_interval: 5s\n    metrics_path: /v1/metrics\n    bearer_token: demotoken\n    static_configs:\n      - targets:\n        - 'watchtower:8080'\n</code></pre> <p>Replace <code>demotoken</code> with the Bearer token you have set accordingly.</p>"},{"location":"advanced-features/metrics/#demo","title":"Demo","text":"<p>The repository contains a demo with prometheus and grafana, available through <code>/examples/metrics/docker-compose.yml</code>. This demo is preconfigured with a dashboard, which will look something like this:</p> <p></p>"},{"location":"advanced-features/remote-hosts/","title":"Remote Hosts","text":"<p>By default, Watchtower is set-up to monitor the local Docker daemon (the same daemon running the Watchtower container itself). However, it is possible to configure Watchtower to monitor a remote Docker endpoint. When starting the Watchtower container you can specify a remote Docker endpoint with either the <code>--host</code> flag or the <code>DOCKER_HOST</code> environment variable:</p> <pre><code>docker run -d \\\n  --name watchtower \\\n  nickfedor/watchtower --host \"tcp://10.0.1.2:2375\"\n</code></pre> <p>or</p> <pre><code>docker run -d \\\n  --name watchtower \\\n  -e DOCKER_HOST=\"tcp://10.0.1.2:2375\" \\\n  nickfedor/watchtower\n</code></pre> <p>Note in both of the examples above that it is unnecessary to mount the /var/run/docker.sock into the Watchtower container.</p>"},{"location":"advanced-features/running-multiple-instances/","title":"Running Multiple Instances","text":"<p>By default, Watchtower will clean up other instances within the same scope and won't allow multiple instances running on the same Docker host or swarm. It is possible to override this behavior by defining a scope to each running instance.</p> <p>Note</p> <ul> <li>Multiple instances can't run with the same scope;</li> <li>An instance without a scope will only clean up other unscoped running instances, allowing coexistence with scoped instances;</li> <li>Supplying <code>none</code> as the scope will treat <code>com.centurylinklabs.watchtower.scope=none</code>, <code>com.centurylinklabs.watchtower.scope=</code> and the lack of a <code>com.centurylinklabs.watchtower.scope</code> label as the scope <code>none</code>. This enables you to run both scoped and unscoped watchtower instances on the same machine.</li> </ul> <p>To define an instance monitoring scope, use the <code>--scope</code> argument or the <code>WATCHTOWER_SCOPE</code> environment variable on startup and set the <code>com.centurylinklabs.watchtower.scope</code> label with the same value for the containers you want to include in this instance's scope (including the instance itself).</p> <p>For example, in a Docker Compose config file:</p> <pre><code>version: '3'\n\nservices:\n  app-with-scope:\n    image: myapps/monitored-by-watchtower\n    labels: [ \"com.centurylinklabs.watchtower.scope=myscope\" ]\n\n  scoped-watchtower:\n    image: nickfedor/watchtower\n    volumes: [ \"/var/run/docker.sock:/var/run/docker.sock\" ]\n    command: --interval 30 --scope myscope\n    labels: [ \"com.centurylinklabs.watchtower.scope=myscope\" ]\n\n  unscoped-app-a:\n    image: myapps/app-a\n\n  unscoped-app-b:\n    image: myapps/app-b\n    labels: [ \"com.centurylinklabs.watchtower.scope=none\" ]\n\n  unscoped-app-c:\n    image: myapps/app-b\n    labels: [ \"com.centurylinklabs.watchtower.scope=\" ]\n\n  unscoped-watchtower:\n    image: nickfedor/watchtower\n    volumes: [ \"/var/run/docker.sock:/var/run/docker.sock\" ]\n    command: --interval 30 --scope none\n</code></pre>"},{"location":"advanced-features/stop-signals/","title":"Stop Signals","text":"<p>When Watchtower detects that a running container needs to be updated it will stop the container by sending it a SIGTERM signal. If your container should be shutdown with a different signal you can communicate this to Watchtower by setting a label named com.centurylinklabs.watchtower.stop-signal with the value of the desired signal.</p> <p>This label can be coded directly into your image by using the <code>LABEL</code> instruction in your Dockerfile:</p> <pre><code>LABEL com.centurylinklabs.watchtower.stop-signal=\"SIGHUP\"\n</code></pre> <p>Or, it can be specified as part of the <code>docker run</code> command line:</p> <pre><code>docker run -d --label=com.centurylinklabs.watchtower.stop-signal=SIGHUP someimage\n</code></pre>"},{"location":"configuration/arguments/","title":"Arguments","text":""},{"location":"configuration/arguments/#overview","title":"Overview","text":"<p>By default, Watchtower monitors all containers running on the Docker daemon it connects to (typically the local daemon, configurable via the <code>--host</code> flag). To limit monitoring to specific containers, provide their names as arguments when starting Watchtower.</p> <pre><code>docker run -d \\\n    --name watchtower \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    --restart unless-stopped \\\n    nickfedor/watchtower \\\n    nginx redis\n</code></pre> <p>In this example, Watchtower monitors only the \"nginx\" and \"redis\" containers, ignoring others. To run a single update attempt and exit, use the <code>--run-once</code> flag with the <code>--rm</code> option to remove the Watchtower container afterward.</p> <pre><code>docker run --rm \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    nickfedor/watchtower \\\n    --run-once \\\n    nginx redis\n</code></pre> <p>This command triggers an update attempt for \"nginx\" and \"redis\" containers, displays debug output, and removes the Watchtower container upon completion. Without arguments, Watchtower monitors all running containers.</p>"},{"location":"configuration/arguments/#secretsfiles","title":"Secrets/Files","text":"<p>Certain flags support referencing a file, using its contents as the value, to securely handle sensitive data like passwords or tokens, avoiding exposure in configuration files or command lines.</p> Flag Environment Variable <code>--notification-url</code> <code>WATCHTOWER_NOTIFICATION_URL</code> <code>--notification-email-server-password</code> <code>WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD</code> <code>--notification-slack-hook-url</code> <code>WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL</code> <code>--notification-msteams-hook</code> <code>WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK</code> <code>--notification-gotify-token</code> <code>WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN</code> <code>--http-api-token</code> <code>WATCHTOWER_HTTP_API_TOKEN</code>"},{"location":"configuration/arguments/#example_docker_compose_usage","title":"Example Docker Compose Usage","text":"<pre><code>secrets:\n  access_token:\n    file: access_token\n\nservices:\n  watchtower:\n    secrets:\n      - access_token\n    environment:\n      - WATCHTOWER_HTTP_API_TOKEN=/run/secrets/access_token\n</code></pre>"},{"location":"configuration/arguments/#time_zone","title":"Time Zone","text":"<p>Sets the time zone for Watchtower's logs and the <code>--schedule</code> flag's cron expressions. Without this setting, Watchtower defaults to UTC.</p> <p>To specify a time zone, use a value from the TZ Database (e.g., <code>Europe/Rome</code>). Alternatively, mount the host's <code>/etc/localtime</code> file using <code>-v /etc/localtime:/etc/localtime:ro</code>.</p> <pre><code>            Argument: None\nEnvironment Variable: TZ\n                Type: String\n             Default: UTC\n</code></pre>"},{"location":"configuration/arguments/#general_options","title":"General Options","text":""},{"location":"configuration/arguments/#help","title":"Help","text":"<p>Displays documentation for supported flags.</p> <pre><code>            Argument: --help\nEnvironment Variable: N/A\n                Type: N/A\n             Default: N/A\n</code></pre>"},{"location":"configuration/arguments/#debug","title":"Debug","text":"<p>Enables debug mode with verbose logging.</p> <pre><code>            Argument: --debug, -d\nEnvironment Variable: WATCHTOWER_DEBUG\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>Equivalent to <code>--log-level debug</code>. As an argument, it does not accept a value (e.g., <code>--debug true</code> is invalid).</p> <p>See Maximum Log Level.</p>"},{"location":"configuration/arguments/#trace","title":"Trace","text":"<p>Enables trace mode with highly verbose logging, including sensitive information like credentials.</p> <pre><code>            Argument: --trace\nEnvironment Variable: WATCHTOWER_TRACE\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>Equivalent to <code>--log-level trace</code>. As an argument, does not accept a value (e.g., <code>--trace true</code> is invalid).</p> <p>See Maximum Log Level.</p> <p>Warning</p> <p>Use with caution due to credential exposure.</p>"},{"location":"configuration/arguments/#maximum_log_level","title":"Maximum Log Level","text":"<p>Sets the maximum log level output to STDERR, visible in <code>docker logs</code> when running Watchtower in a container.</p> <pre><code>            Argument: --log-level\nEnvironment Variable: WATCHTOWER_LOG_LEVEL\n     Possible Values: panic, fatal, error, warn, info, debug, trace\n             Default: info\n</code></pre>"},{"location":"configuration/arguments/#logging_format","title":"Logging Format","text":"<p>Specifies the format for console log output.</p> <pre><code>            Argument: --log-format, -l\nEnvironment Variable: WATCHTOWER_LOG_FORMAT\n     Possible Values: Auto, LogFmt, Pretty, JSON\n             Default: Auto\n</code></pre>"},{"location":"configuration/arguments/#disable_ansi_colors","title":"Disable ANSI Colors","text":"<p>Disables ANSI color escape codes in log output for plain text logs.</p> <pre><code>            Argument: --no-color\nEnvironment Variable: NO_COLOR\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"configuration/arguments/#run_once","title":"Run Once","text":"<p>Triggers a single update attempt for specified containers and exits immediately.</p> <pre><code>            Argument: --run-once, -R\nEnvironment Variable: WATCHTOWER_RUN_ONCE\n                Type: Boolean\n             Default: false\n!!! Warning\n    When using `--run-once` with Docker Compose or similar orchestration tools, ensure your container's restart policy is compatible. Using `restart: unless-stopped` or similar policies may cause restart loops after Watchtower exits successfully. Consider using `restart: \"no\"` or `--rm` with `docker run` for one-time updates.\n</code></pre> <p>Note</p> <p>Enables debug output during execution, suitable for interactive use. Use with <code>--rm</code> to remove the Watchtower container after completion.</p>"},{"location":"configuration/arguments/#scheduling_polling","title":"Scheduling &amp; Polling","text":""},{"location":"configuration/arguments/#schedule","title":"Schedule","text":"<p>Defines when and how often Watchtower checks for new images using a 6-field Cron expression.</p> <p>Example: <code>--schedule \"0 0 4 * * *\"</code> runs daily at 4 AM.</p> <pre><code>            Argument: --schedule, -s\nEnvironment Variable: WATCHTOWER_SCHEDULE\n                Type: String\n             Default: None\n</code></pre> <p>Note</p> <p>Cannot be used with <code>--interval</code>.</p> <p>Requires a time zone set via <code>TZ</code> or a mounted <code>/etc/localtime</code> file. See Time Zone.</p>"},{"location":"configuration/arguments/#poll_interval","title":"Poll Interval","text":"<p>Sets the interval (in seconds) for polling new images.</p> <pre><code>            Argument: --interval, -i\nEnvironment Variable: WATCHTOWER_POLL_INTERVAL\n                Type: Integer\n             Default: 86400 (24 hours)\n</code></pre> <p>Note</p> <p>Cannot be used with <code>--schedule</code>. Overrides cron-based scheduling.</p>"},{"location":"configuration/arguments/#http_api_periodic_polls","title":"HTTP API Periodic Polls","text":"<p>Enables periodic updates when HTTP API mode is active, allowing both API-triggered and scheduled updates.</p> <pre><code>            Argument: --http-api-periodic-polls\nEnvironment Variable: WATCHTOWER_HTTP_API_PERIODIC_POLLS\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>Requires <code>--http-api-update</code>.</p> <p>See HTTP API Mode.</p>"},{"location":"configuration/arguments/#container_management","title":"Container Management","text":""},{"location":"configuration/arguments/#include_stopped_containers","title":"Include Stopped Containers","text":"<p>Includes created and exited containers in monitoring and updates.</p> <pre><code>            Argument: --include-stopped, -S\nEnvironment Variable: WATCHTOWER_INCLUDE_STOPPED\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"configuration/arguments/#revive_stopped_containers","title":"Revive Stopped Containers","text":"<p>Restarts stopped containers after their images are updated.</p> <pre><code>            Argument: --revive-stopped\nEnvironment Variable: WATCHTOWER_REVIVE_STOPPED\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>Requires <code>--include-stopped</code>.</p>"},{"location":"configuration/arguments/#include_restarting_containers","title":"Include Restarting Containers","text":"<p>Includes containers in the restarting state for monitoring and updates.</p> <pre><code>            Argument: --include-restarting\nEnvironment Variable: WATCHTOWER_INCLUDE_RESTARTING\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"configuration/arguments/#disable_container_restart","title":"Disable Container Restart","text":"<p>Prevents restarting containers after updating. This is useful when an external system (e.g., systemd) manages the container lifecycle.</p> <pre><code>            Argument: --no-restart\nEnvironment Variable: WATCHTOWER_NO_RESTART\n                Type: Boolean\n             Default: false\n</code></pre> <p>Warning</p> <p>Combining <code>--no-restart</code> with <code>--cleanup</code> during Watchtower self-update may leave a renamed Watchtower container running without starting a new one, preventing cleanup of the old image.</p> <p>Use cautiously for self-updating Watchtower instances and consider external lifecycle management (e.g., Docker Compose) to restart containers manually.</p>"},{"location":"configuration/arguments/#rolling_restart","title":"Rolling Restart","text":"<p>Restarts containers one at a time to minimize downtime. This is ideal for zero-downtime deployments with lifecycle hooks. When containers have health checks configured, Watchtower waits for each container to become healthy before proceeding to the next one.</p> <pre><code>            Argument: --rolling-restart\nEnvironment Variable: WATCHTOWER_ROLLING_RESTART\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>When combined with <code>--cleanup</code>, image cleanup is deferred until all containers are updated, which may temporarily increase disk usage for large numbers of containers (&gt;50). This is typically negligible for homelab setups but monitor disk space on resource-constrained hosts.</p> <p>If a container fails to become healthy within 5 minutes, Watchtower logs a warning but continues with the next container to avoid blocking the entire update process.</p>"},{"location":"configuration/arguments/#cleanup_old_images","title":"Cleanup Old Images","text":"<p>Removes old images after updating containers to free disk space.</p> <pre><code>            Argument: --cleanup\nEnvironment Variable: WATCHTOWER_CLEANUP\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>During Watchtower self-updates, cleanup is deferred to the new container to prevent premature image deletion.</p> <p>Ensure <code>--no-restart</code> is not used with <code>--cleanup</code> to avoid incomplete updates.</p>"},{"location":"configuration/arguments/#remove_anonymous_volumes","title":"Remove Anonymous Volumes","text":"<p>Deletes anonymous volumes when updating containers. Named volumes remain unaffected.</p> <pre><code>            Argument: --remove-volumes\nEnvironment Variable: WATCHTOWER_REMOVE_VOLUMES\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>Containers with the Docker <code>AutoRemove</code> option enabled are automatically removed by the Docker daemon after stopping. Watchtower skips explicit removal in such cases. This does not affect named volumes.</p>"},{"location":"configuration/arguments/#monitor_only","title":"Monitor Only","text":"<p>Monitors for new images, sends notifications, and runs lifecycle hooks without updating containers.</p> <pre><code>            Argument: --monitor-only\nEnvironment Variable: WATCHTOWER_MONITOR_ONLY\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>Images may still be pulled due to Docker API limitations for digest comparison.</p> <p>Can be set per container via the <code>com.centurylinklabs.watchtower.monitor-only</code> label.</p> <p>See Label Precedence.</p>"},{"location":"configuration/arguments/#disable_image_pulling","title":"Disable Image Pulling","text":"<p>Prevents pulling new images from registries, monitoring only local image cache changes. Useful for locally built images.</p> <pre><code>            Argument: --no-pull\nEnvironment Variable: WATCHTOWER_NO_PULL\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>Can be set per container via the <code>com.centurylinklabs.watchtower.no-pull</code> label.</p> <p>See Label Precedence.</p>"},{"location":"configuration/arguments/#enable_label_filter","title":"Enable Label Filter","text":"<p>Restricts monitoring to containers with the <code>com.centurylinklabs.watchtower.enable</code> label set to <code>true</code> when the <code>--label-enable</code> flag is specified. Without <code>--label-enable</code>, containers with this label set to <code>false</code> are excluded, while others are monitored by default.</p> <pre><code>            Argument: --label-enable\nEnvironment Variable: WATCHTOWER_LABEL_ENABLE\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>When <code>--label-enable</code> is unset, containers without the <code>com.centurylinklabs.watchtower.enable</code> label or with it set to <code>true</code> are monitored, and those with <code>false</code> are excluded.</p> <p>When <code>--label-enable</code> is set, only containers with <code>true</code> are monitored, ignoring those with <code>false</code> or no label.</p>"},{"location":"configuration/arguments/#disable_specific_containers","title":"Disable Specific Containers","text":"<p>Excludes containers by name from monitoring, even if they have the enable label set to <code>true</code>.</p> <pre><code>            Argument: --disable-containers, -x\nEnvironment Variable: WATCHTOWER_DISABLE_CONTAINERS\n                Type: Comma- or space-separated string list\n             Default: None\n</code></pre>"},{"location":"configuration/arguments/#scope_filter","title":"Scope Filter","text":"<p>Monitors containers with a <code>com.centurylinklabs.watchtower.scope</code> label matching the specified value, enabling multiple Watchtower instances.</p> <pre><code>            Argument: --scope\nEnvironment Variable: WATCHTOWER_SCOPE\n                Type: String\n             Default: None\n</code></pre> <p>Note</p> <p>Set to <code>none</code> to ignore scoped containers. Without this flag, Watchtower monitors all containers regardless of scope.</p> <p>For self-updates, ensure all Watchtower containers share the same <code>com.centurylinklabs.watchtower.scope</code> label to guarantee cleanup of renamed containers and old images. Mismatched labels may prevent detection, leaving resources running.</p> <p>See Running Multiple Instances.</p>"},{"location":"configuration/arguments/#label_precedence","title":"Label Precedence","text":"<p>Allows container labels (e.g., <code>com.centurylinklabs.watchtower.monitor-only</code>, <code>com.centurylinklabs.watchtower.no-pull</code>) to override corresponding flags.</p> <pre><code>            Argument: --label-take-precedence\nEnvironment Variable: WATCHTOWER_LABEL_TAKE_PRECEDENCE\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"configuration/arguments/#registry_authentication","title":"Registry &amp; Authentication","text":""},{"location":"configuration/arguments/#repo_user","title":"REPO_USER","text":"<p>Sets the username for authenticating with a private registry, such as Docker Hub.</p> <pre><code>            Argument: None\nEnvironment Variable: REPO_USER\n                Type: String\n             Default: None\n</code></pre> <p>Note</p> <p>Must be used with <code>REPO_PASS</code> to provide valid credentials. Suitable for simple username/password authentication.</p> <p>For Docker Hub, the registry is implicitly <code>https://index.docker.io/v1/</code>.</p>"},{"location":"configuration/arguments/#repo_pass","title":"REPO_PASS","text":"<p>Sets the password for authenticating with a private registry, such as Docker Hub.</p> <pre><code>            Argument: None\nEnvironment Variable: REPO_PASS\n                Type: String\n             Default: None\n</code></pre> <p>Note</p> <p>Must be used with <code>REPO_USER</code>.</p> <p>Can be a password or a personal access token for registries requiring 2FA (e.g., Docker Hub).</p> <p>Use Docker secrets (e.g., <code>WATCHTOWER_PASS=/run/secrets/repo_pass</code>) or environment files to avoid exposing sensitive data in command lines.</p>"},{"location":"configuration/arguments/#docker_config","title":"DOCKER_CONFIG","text":"<p>Specifies the directory containing the Docker configuration file (<code>config.json</code>) for registry authentication.</p> <pre><code>            Argument: None\nEnvironment Variable: DOCKER_CONFIG\n                Type: String\n             Default: `/`\n</code></pre> <p>Note</p> <p>Useful for registries requiring complex authentication (e.g., 2FA on Docker Hub) or credential helpers (e.g., AWS ECR).</p> <p>Mount the <code>config.json</code> file to the container (e.g., <code>-v ~/.docker/config.json:/config.json</code>) and set this variable to the directory containing the file (e.g., <code>/</code>).</p> <p>Changes to the mounted file may require a symlink to ensure updates propagate.</p> <p>See Usage and Private Registries.</p>"},{"location":"configuration/arguments/#skip_registry_tls_verification","title":"Skip Registry TLS Verification","text":"<p>Disables TLS certificate verification for registry connections, useful for self-signed certificates or insecure registries.</p> <pre><code>            Argument: --registry-tls-skip\nEnvironment Variable: WATCHTOWER_REGISTRY_TLS_SKIP\n                Type: Boolean\n             Default: false\n</code></pre> <p>Warning</p> <p>Use cautiously, as it reduces security. Suitable for testing or private registries.</p>"},{"location":"configuration/arguments/#minimum_registry_tls_version","title":"Minimum Registry TLS Version","text":"<p>Sets the minimum TLS version for registry connections, overriding the default (TLS 1.2).</p> <pre><code>            Argument: --registry-tls-min-version\nEnvironment Variable: WATCHTOWER_REGISTRY_TLS_MIN_VERSION\n     Possible Values: TLS1.0, TLS1.1, TLS1.2, TLS1.3\n             Default: TLS1.2\n</code></pre> <p>Warning</p> <p>Using older versions of TLS not recommended for security reasons.</p>"},{"location":"configuration/arguments/#proxy_configuration","title":"Proxy Configuration","text":"<p>Watchtower supports HTTP/HTTPS proxies for registry connections by respecting standard environment variables. Set these in the Watchtower container to route requests (e.g., to Docker Hub or private registries) through a proxy. This is useful in environments without direct internet access.</p> <p>Proxy settings are read from the following variables (uppercase and lowercase variants are supported for compatibility):</p> <pre><code>            Argument: None\nEnvironment Variable: HTTP_PROXY / http_proxy\n                Type: String (e.g., \"http://proxy.example.com:3128\")\n             Default: None\n</code></pre> <pre><code>            Argument: None\nEnvironment Variable: HTTPS_PROXY / https_proxy\n                Type: String (e.g., \"http://proxy.example.com:3128\")\n             Default: None\n</code></pre> <pre><code>            Argument: None\nEnvironment Variable: NO_PROXY / no_proxy\n                Type: Comma-separated string (e.g., \"localhost,127.0.0.1,internal.example.com\")\n             Default: None\n</code></pre> <p>Note</p> <p>Proxies may require authentication. Include it in the URL (e.g., <code>http://user:pass@proxy.example.com:3128</code>), but avoid exposing credentials in the command line by using Docker secrets or environment files instead.</p> <p>If your proxy uses a self-signed certificate, combine with <code>--registry-tls-skip</code> to disable TLS verification (use cautiously).</p> <p>For details on how Go handles these variables, see the net/http.ProxyFromEnvironment documentation.</p>"},{"location":"configuration/arguments/#warn_on_head_failure","title":"Warn on HEAD Failure","text":"<p>Controls warnings for failed HEAD requests to registries. <code>Auto</code> warns for registries known to support HEAD requests (e.g., docker.io) that may rate-limit.</p> <pre><code>            Argument: --warn-on-head-failure\nEnvironment Variable: WATCHTOWER_WARN_ON_HEAD_FAILURE\n     Possible Values: always, auto, never\n             Default: auto\n</code></pre>"},{"location":"configuration/arguments/#docker_connection","title":"Docker Connection","text":""},{"location":"configuration/arguments/#docker_host","title":"Docker Host","text":"<p>Specifies the Docker daemon socket to connect to, supporting remote hosts via TCP (e.g., <code>tcp://hostname:port</code>).</p> <pre><code>            Argument: --host, -H\nEnvironment Variable: DOCKER_HOST\n                Type: String\n             Default: unix:///var/run/docker.sock\n</code></pre>"},{"location":"configuration/arguments/#docker_api_version","title":"Docker API Version","text":"<p>Sets the Docker API version for client-daemon communication.</p> <pre><code>            Argument: --api-version, -a\nEnvironment Variable: DOCKER_API_VERSION\n                Type: String\n             Default: Autonegotiated\n</code></pre> <p>Note</p> <p>Falls back to autonegotiation on failure.</p> <p>Warning</p> <p>Minimum supported version is Docker v1.23.</p> <p>Refer to Docker's API version matrix for compatibility.</p>"},{"location":"configuration/arguments/#enable_docker_tls_verification","title":"Enable Docker TLS Verification","text":"<p>Enables TLS verification for Docker socket connections.</p> <pre><code>            Argument: --tlsverify\nEnvironment Variable: DOCKER_TLS_VERIFY\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"configuration/arguments/#disable_memory_swappiness","title":"Disable Memory Swappiness","text":"<p>Sets memory swappiness to <code>nil</code> for Podman compatibility with crun and cgroupv2, overriding Podman's default of <code>0</code>.</p> <pre><code>            Argument: --disable-memory-swappiness\nEnvironment Variable: WATCHTOWER_DISABLE_MEMORY_SWAPPINESS\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"configuration/arguments/#http_api_metrics","title":"HTTP API &amp; Metrics","text":""},{"location":"configuration/arguments/#http_api_mode","title":"HTTP API Mode","text":"<p>Runs Watchtower in HTTP API mode, allowing updates only via HTTP requests, with support for tag-specific filtering (e.g., <code>image=foo/bar:1.0</code>).</p> <pre><code>            Argument: --http-api-update\nEnvironment Variable: WATCHTOWER_HTTP_API_UPDATE\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>See HTTP API Mode for details.</p>"},{"location":"configuration/arguments/#http_api_token","title":"HTTP API Token","text":"<p>Sets an authentication token for HTTP API requests. Can reference a file for security.</p> <pre><code>            Argument: --http-api-token\nEnvironment Variable: WATCHTOWER_HTTP_API_TOKEN\n                Type: String\n             Default: None\n</code></pre>"},{"location":"configuration/arguments/#http_api_metrics_1","title":"HTTP API Metrics","text":"<p>Enables a Prometheus metrics endpoint via HTTP.</p> <pre><code>            Argument: --http-api-metrics\nEnvironment Variable: WATCHTOWER_HTTP_API_METRICS\n                Type: Boolean\n             Default: false\n</code></pre> <p>Note</p> <p>See Metrics for details.</p>"},{"location":"configuration/arguments/#http_api_port","title":"HTTP API Port","text":"<p>Sets the listening port for the HTTP API.</p> <pre><code>            Argument: --http-api-port\nEnvironment Variable: WATCHTOWER_HTTP_API_PORT\n                Type: String\n             Default: 8080\n</code></pre>"},{"location":"configuration/arguments/#notifications","title":"Notifications","text":""},{"location":"configuration/arguments/#notification_url","title":"Notification URL","text":"<p>Configures the notification service URL. Can reference a file for sensitive values.</p> <pre><code>            Argument: --notification-url\nEnvironment Variable: WATCHTOWER_NOTIFICATION_URL\n                Type: String\n             Default: None\n</code></pre>"},{"location":"configuration/arguments/#notification_email_server_password","title":"Notification Email Server Password","text":"<p>Sets the password for the email notification server. Can reference a file for security.</p> <pre><code>            Argument: --notification-email-server-password\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD\n                Type: String\n             Default: None\n</code></pre>"},{"location":"configuration/arguments/#notification_slack_hook_url","title":"Notification Slack Hook URL","text":"<p>Sets the Slack webhook URL for notifications. Can reference a file for security.</p> <pre><code>            Argument: --notification-slack-hook-url\nEnvironment Variable: WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL\n                Type: String\n             Default: None\n</code></pre>"},{"location":"configuration/arguments/#notification_microsoft_teams_hook","title":"Notification Microsoft Teams Hook","text":"<p>Sets the Microsoft Teams webhook URL for notifications. Can reference a file for security.</p> <pre><code>            Argument: --notification-msteams-hook\nEnvironment Variable: WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK\n                Type: String\n             Default: None\n</code></pre>"},{"location":"configuration/arguments/#notification_gotify_token","title":"Notification Gotify Token","text":"<p>Sets the Gotify token for notifications. Can reference a file for security.</p> <pre><code>            Argument: --notification-gotify-token\nEnvironment Variable: WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN\n                Type: String\n             Default: None\n</code></pre>"},{"location":"configuration/arguments/#disable_startup_message","title":"Disable Startup Message","text":"<p>Suppresses the info-level notification sent when Watchtower starts.</p> <pre><code>            Argument: --no-startup-message\nEnvironment Variable: WATCHTOWER_NO_STARTUP_MESSAGE\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"configuration/arguments/#lifecycle_health","title":"Lifecycle &amp; Health","text":""},{"location":"configuration/arguments/#container_stop_timeout","title":"Container Stop Timeout","text":"<p>Sets the timeout (e.g., <code>30s</code>) before forcibly stopping a container during updates.</p> <pre><code>            Argument: --stop-timeout\nEnvironment Variable: WATCHTOWER_TIMEOUT\n                Type: Duration\n             Default: 30s\n</code></pre>"},{"location":"configuration/arguments/#health_check","title":"Health Check","text":"<p>Returns a success exit code for Docker <code>HEALTHCHECK</code>, verifying another process is running in the container.</p> <pre><code>            Argument: --health-check\nEnvironment Variable: None\n                Type: N/A\n             Default: N/A\n</code></pre> <p>Note</p> <p>Intended solely for Docker <code>HEALTHCHECK</code>. Do not use on the main command line.</p>"},{"location":"configuration/arguments/#output_compatibility","title":"Output &amp; Compatibility","text":""},{"location":"configuration/arguments/#programmatic_output_porcelain","title":"Programmatic Output (Porcelain)","text":"<p>Outputs session results in a machine-readable format (version specified by <code>VERSION</code>).</p> <pre><code>            Argument: --porcelain, -P\nEnvironment Variable: WATCHTOWER_PORCELAIN\n     Possible Values: v1\n             Default: None\n</code></pre> <p>Note</p> <p>Equivalent to: <pre><code>--notification-url logger://\n--notification-log-stdout\n--notification-report\n--notification-template porcelain.VERSION.summary-no-log\n</code></pre></p>"},{"location":"configuration/container-selection/","title":"Container Selection","text":"<p>By default, Watchtower will watch all containers. However, sometimes only some containers should be updated.</p> <p>There are two options:</p> <ul> <li>Fully exclude: You can choose to exclude containers entirely from being watched by Watchtower.</li> <li>Monitor only: In this mode, Watchtower checks for container updates, sends notifications and invokes the pre-check/post-check hooks on the containers but does not perform the update.</li> </ul>"},{"location":"configuration/container-selection/#full_exclude","title":"Full Exclude","text":"<p>If you need to exclude some containers, set the com.centurylinklabs.watchtower.enable label to <code>false</code>. For clarity this should be set on the container(s) you wish to be ignored, this is not set on Watchtower.</p> dockerfiledocker rundocker-compose <pre><code>LABEL com.centurylinklabs.watchtower.enable=\"false\"\n</code></pre> <pre><code>docker run -d --label=com.centurylinklabs.watchtower.enable=false someimage\n</code></pre> <pre><code>version: \"3\"\nservices:\n  someimage:\n    container_name: someimage\n    labels:\n      - \"com.centurylinklabs.watchtower.enable=false\"\n</code></pre> <p>If instead you want to only include containers with the enable label, pass the <code>--label-enable</code> flag or the <code>WATCHTOWER_LABEL_ENABLE</code> environment variable on startup for Watchtower and set the com.centurylinklabs.watchtower.enable label with a value of <code>true</code> on the containers you want to watch.</p> dockerfiledocker rundocker-compose <pre><code>LABEL com.centurylinklabs.watchtower.enable=\"true\"\n</code></pre> <pre><code>docker run -d --label=com.centurylinklabs.watchtower.enable=true someimage\n</code></pre> <pre><code>version: \"3\"\nservices:\n  someimage:\n    container_name: someimage\n    labels:\n      - \"com.centurylinklabs.watchtower.enable=true\"\n</code></pre> <p>If you wish to create a monitoring scope, you will need to run multiple instances and set a scope for each of them.</p> <p>Watchtower filters running containers by testing them against each configured criteria. A container is monitored if all criteria are met.</p> <p>For example:</p> <ul> <li>If a container's name is on the monitoring name list (not empty <code>--name</code> argument), but it is not enabled (centurylinklabs.watchtower.enable=false), then it won't be monitored.</li> <li>If a container's name is not on the monitoring name list (not empty <code>--name</code> argument), even if it is enabled (centurylinklabs.watchtower.enable=true and <code>--label-enable</code> flag is set), then it won't be monitored.</li> </ul>"},{"location":"configuration/container-selection/#monitor_only","title":"Monitor Only","text":"<p>Individual containers can be marked to only be monitored and will not be updated by Watchtower.</p> <p>To do so, set the com.centurylinklabs.watchtower.monitor-only label to <code>true</code> on that container:</p> <pre><code>LABEL com.centurylinklabs.watchtower.monitor-only=\"true\"\n</code></pre> <p>Or, it can be specified as part of the <code>docker run</code> command line:</p> <pre><code>docker run -d --label=com.centurylinklabs.watchtower.monitor-only=true someimage\n</code></pre> <p>When the label is specified on a container, Watchtower treats that container exactly as if <code>WATCHTOWER_MONITOR_ONLY</code> was set, but the effect is limited to the individual container.</p>"},{"location":"configuration/private-registries/","title":"Private Registries","text":"<p>Watchtower supports private Docker image registries.</p> <p>In many cases, accessing a private registry requires a valid username and password (i.e., credentials). In order to operate in such an environment, Watchtower needs to know the credentials to access the registry. The credentials can be provided to Watchtower in a configuration file called <code>config.json</code>.</p> <p>There are two ways to generate this configuration file:</p> <ol> <li>The configuration file can be created manually.</li> <li>Call <code>docker login &lt;REGISTRY_NAME&gt;</code> and share the resulting configuration file.</li> </ol>"},{"location":"configuration/private-registries/#creating_the_configuration_file_manually","title":"Creating the configuration file manually","text":"<p>Create a new configuration file with the following syntax and a base64 encoded username and password <code>auth</code> string:</p> config.json<pre><code>{\n    \"auths\": {\n        \"&lt;REGISTRY_NAME&gt;\": {\n            \"auth\": \"XXXXXXX\"\n        }\n    }\n}\n</code></pre> <p><code>&lt;REGISTRY_NAME&gt;</code> needs to be replaced by the name of your private registry (e.g., <code>my-private-registry.example.org</code>).</p>"},{"location":"configuration/private-registries/#using_private_docker_hub_images","title":"Using Private Docker Hub Images","text":"<p>To access private repositories on Docker Hub, <code>&lt;REGISTRY_NAME&gt;</code> should be <code>https://index.docker.io/v1/</code>. The registry domain does not have to be specified in <code>docker run</code> or <code>docker-compose</code>.</p> <p>Like Docker, Watchtower will use the Docker Hub registry and its credentials when no registry domain is specified. Watchtower will recognize credentials with <code>&lt;REGISTRY_NAME&gt;</code> <code>index.docker.io</code>, but the Docker CLI will not.</p>"},{"location":"configuration/private-registries/#using_a_private_registry_on_a_local_host","title":"Using a Private Registry on a Local Host","text":"<p>To use a private registry hosted locally, make sure to correctly specify the registry host in both <code>config.json</code> and the <code>docker run</code> command or <code>docker-compose</code> file. Valid hosts are <code>localhost[:PORT]</code>, <code>HOST:PORT</code>, or any multi-part <code>domain.name</code> or IP-address with or without a port.</p> <p>Examples:</p> <ul> <li><code>localhost</code> -&gt; <code>localhost/myimage</code></li> <li><code>127.0.0.1</code> -&gt; <code>127.0.0.1/myimage:mytag</code></li> <li><code>host.domain</code> -&gt; <code>host.domain/myorganization/myimage</code></li> <li><code>other-lan-host:80</code> -&gt; <code>other-lan-host:80/imagename:latest</code></li> </ul> <p>The required <code>auth</code> string can be generated as follows:</p> <pre><code>echo -n 'username:password' | base64\n</code></pre> <p>Username and Password for GCloud</p> <p>For gcloud, we'll use <code>_json_key</code> as our username and the content of <code>gcloudauth.json</code> as the password. <pre><code>bash echo -n \"_json_key:$(cat gcloudauth.json)\" | base64 -w0\n</code></pre></p> <p>When the Watchtower Docker container is started, the created configuration file (<code>&lt;PATH&gt;/config.json</code> in this example) needs to be passed to the container:</p> <pre><code>docker run [...] -v &lt;PATH&gt;/config.json:/config.json nickfedor/watchtower\n</code></pre>"},{"location":"configuration/private-registries/#sharing_the_docker_configuration_file","title":"Sharing the Docker Configuration File","text":"<p>To pull an image from a private registry, <code>docker login</code> needs to be called first, to get access to the registry. The provided credentials are stored in a configuration file called <code>&lt;PATH_TO_HOME_DIR&gt;/.docker/config.json</code>. This configuration file can be directly used by Watchtower. In this case, the creation of an additional configuration file is not necessary.</p> <p>When the Docker container is started, pass the configuration file to Watchtower:</p> <pre><code>docker run [...] -v &lt;PATH_TO_HOME_DIR&gt;/.docker/config.json:/config.json nickfedor/watchtower\n</code></pre> <p>When creating the Watchtower container via Docker Compose, use the following lines:</p> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - &lt;PATH_TO_HOME_DIR&gt;/.docker/config.json:/config.json\n  ...\n</code></pre>"},{"location":"configuration/private-registries/#docker_config_path","title":"Docker Config path","text":"<p>By default, Watchtower will look for the <code>config.json</code> file in <code>/</code>, but this can be changed by setting the <code>DOCKER_CONFIG</code> environment variable to the directory path where your config is located. This is useful for setups where the config.json file is changed while the Watchtower instance is running, as the changes will not be picked up for a mounted file if the inode changes.</p> <p>For example:</p> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower\n    environment:\n        DOCKER_CONFIG: /config\n    volumes:\n      - /etc/watchtower/config/:/config/\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre>"},{"location":"configuration/private-registries/#credential_helpers","title":"Credential helpers","text":"<p>Some private Docker registries (the most prominent probably being AWS ECR) use non-standard ways of authentication. To be able to use this together with Watchtower, we need to use a credential helper.</p> <p>To keep the image size small we've decided to not include any helpers in the Watchtower image, instead we'll put the helper in a separate container and mount it using volumes.</p>"},{"location":"configuration/private-registries/#example","title":"Example","text":"<p>Here is an example implementation for use with the amazon-ecr-credential-helper:</p> <p>Use the Dockerfile below to build the <code>amazon-ecr-credential-helper</code> image in a volume that may be mounted onto your Watchtower container.</p> <ol> <li> <p>Create the Dockerfile:</p> Example Dockerfile for Amazon ECR Credential Helper<pre><code>FROM golang:1.25\n\nENV GO111MODULE off\nENV CGO_ENABLED 0\nENV REPO github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login\n\nRUN go get -u $REPO\n\nRUN rm /go/bin/docker-credential-ecr-login\n\nRUN go build \\\n -o /go/bin/docker-credential-ecr-login \\\n /go/src/$REPO\n\nWORKDIR /go/bin/\n</code></pre> </li> <li> <p>Use the following commands to build the <code>aws-ecr-dock-cred-helper</code> and store it's output in a volume:</p> <ul> <li> <p>Create a volume to store the command (once built):</p> <pre><code>docker volume create helper\n</code></pre> </li> <li> <p>Build the container:</p> <pre><code>docker build -t aws-ecr-dock-cred-helper .\n</code></pre> </li> <li> <p>Build the command and store it in the new volume in the <code>/go/bin</code> directory:</p> <pre><code>docker run  -d --rm --name aws-cred-helper \\\n  --volume helper:/go/bin aws-ecr-dock-cred-helper\n</code></pre> </li> </ul> </li> <li> <p>Create a configuration file for Docker, and store it in <code>$HOME/.docker/config.json</code>.    Replace the  placeholders with your <code>AWS Account ID</code> and  with your <code>AWS ECR Region</code>: <pre><code>{\n   \"credsStore\" : \"ecr-login\",\n   \"HttpHeaders\" : {\n     \"User-Agent\" : \"Docker-Client/19.03.1 (XXXXXX)\"\n   },\n   \"auths\" : {\n     \"&lt;AWS_ACCOUNT_ID&gt;.dkr.ecr.&lt;AWS_ECR_REGION&gt;.amazonaws.com\" : {}\n   },\n   \"credHelpers\": {\n     \"&lt;AWS_ACCOUNT_ID&gt;.dkr.ecr.&lt;AWS_ECR_REGION&gt;.amazonaws.com\" : \"ecr-login\"\n   }\n}\n</code></pre> <pre><code>services:\n # Check for new images and restart things if a new image exists\n # for any of our containers.\n watchtower:\n   image: nickfedor/watchtower:latest\n   volumes:\n     - /var/run/docker.sock:/var/run/docker.sock\n     - .docker/config.json:/config.json\n     - helper:/go/bin\n   environment:\n     - HOME=/\n     - PATH=$PATH:/go/bin\n     - AWS_REGION=us-west-1\nvolumes:\n helper:\n   external: true\n</code></pre> <p>A few additional notes:</p> <ol> <li> <p>The volume (helper, in this case) MUST be set to <code>external: true</code>, otherwise Docker Compose will preface it with the directory name.</p> </li> <li> <p>Note that \"credsStore\" : \"ecr-login\" is needed - and in theory if you have that you can remove the credHelpers section</p> </li> <li> <p>This may be able to run in an EC2 instance that has credentials assigned to it, so no keys are needed; however, you may need to include the <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code> environment variables as well.</p> </li> </ol> <p>Then, mount the <code>~/.aws</code> directory to <code>/</code> in the container.</p>"},{"location":"configuration/secure-connections/","title":"Secure Connections","text":"<p>Watchtower is also capable of connecting to Docker endpoints which are protected by SSL/TLS.</p> <p>If you've used <code>docker-machine</code> to provision your remote Docker host, you simply need to volume mount the certificates generated by docker-machine into the Watchtower container and optionally specify <code>--tlsverify</code> flag.</p> <p>The <code>docker-machine</code> certificates for a particular host can be located by executing the <code>docker-machine env</code> command for the desired host (note the values for the <code>DOCKER_HOST</code> and <code>DOCKER_CERT_PATH</code> environment variables that are returned from this command).</p> <p>The directory containing the certificates for the remote host needs to be mounted into the Watchtower container at <code>/etc/ssl/docker</code>.</p> <p>With the certificates mounted into the Watchtower container you need to specify the <code>--tlsverify</code> flag to enable verification of the certificate:</p> Docker CLIDocker Compose <pre><code>docker run -d \\\n--name watchtower \\\n-e DOCKER_HOST=$DOCKER_HOST \\\n-e DOCKER_CERT_PATH=/etc/ssl/docker \\\n-v $DOCKER_CERT_PATH:/etc/ssl/docker \\\n--restart unless-stopped\nnickfedor/watchtower --tlsverify\n</code></pre> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower\n    environment:\n    - DOCKER_HOST=$DOCKER_HOST\n    - DOCKER_CERT_PATH=/etc/ssl/docker\n    - DOCKER_TLS_VERIFY=true\n    restart: unless-stopped\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#sources","title":"Sources","text":""},{"location":"getting-started/installation/#container_image","title":"Container Image","text":"<ul> <li>Docker Hub</li> <li>GitHub Container Registry</li> </ul>"},{"location":"getting-started/installation/#binary","title":"Binary","text":"<ul> <li>GitHub Releases</li> </ul>"},{"location":"getting-started/installation/#cli_commands","title":"CLI Commands","text":""},{"location":"getting-started/installation/#pulling_the_container_image","title":"Pulling the Container Image","text":"Docker HubGitHub <pre><code>docker pull nickfedor/watchtower:latest\n</code></pre> <pre><code>docker pull ghcr.io/nicholas-fedor/watchtower:latest\n</code></pre>"},{"location":"getting-started/installation/#downloading_the_binary","title":"Downloading the Binary","text":"<p>The following will download and extract the binary to the current directory:</p> Windows (amd64)Linux (amd64)macOS (amd64) PowerShell<pre><code>iwr (iwr https://api.github.com/repos/nicholas-fedor/watchtower/releases/latest | ConvertFrom-Json).assets.where({$_.name -like \"*windows_amd64*.zip\"}).browser_download_url -OutFile watchtower.zip; Add-Type -AssemblyName System.IO.Compression.FileSystem; $zip = [System.IO.Compression.ZipFile]::OpenRead(\"$PWD\\watchtower.zip\"); $zip.Entries | Where-Object {$_.Name -eq 'watchtower.exe'} | ForEach-Object {[System.IO.Compression.ZipFileExtensions]::ExtractToFile($_, \"$PWD\\watchtower.exe\", $true)}; $zip.Dispose(); Remove-Item watchtower.zip; if (Test-Path \".\\watchtower.exe\") { Write-Host \"Successfully installed watchtower.exe to current directory\" } else { Write-Host \"Failed to install watchtower.exe\" }\n</code></pre> Bash<pre><code>curl -L $(curl -s https://api.github.com/repos/nicholas-fedor/watchtower/releases/latest | grep -o 'https://[^\"]*linux_amd64[^\"]*\\.tar\\.gz') | tar -xz -C . watchtower &amp;&amp; if [ -f ./watchtower ]; then echo \"Successfully installed watchtower to current directory\"; else echo \"Failed to install watchtower\"; fi\n</code></pre> Bash<pre><code>curl -L $(curl -s https://api.github.com/repos/nicholas-fedor/watchtower/releases/latest | grep -o 'https://[^\"]*darwin_amd64[^\"]*\\.tar\\.gz') | tar -xz -C . watchtower &amp;&amp; if [ -f ./watchtower ]; then echo \"Successfully installed watchtower to current directory\"; else echo \"Failed to install watchtower\"; fi\n</code></pre> <p>Note</p> <p>Review the release page for additional architectures (e.g., arm, arm64, i386, riscv64).</p>"},{"location":"getting-started/installation/#supported_architectures","title":"Supported Architectures","text":"<p>Watchtower supports the following architectures:</p> <ul> <li>amd64</li> <li>i386</li> <li>armhf</li> <li>arm64v8</li> <li>riscv64</li> </ul>"},{"location":"getting-started/overview/","title":"Overview","text":"<p>Watchtower is an application that will monitor your running Docker containers and watch for changes to the images that those containers were originally started from. If Watchtower detects that an image has changed, it will automatically restart the container using the new image.</p> <p>With Watchtower you can update the container by pushing a new image to the registry that's repective to the container's image. Watchtower will pull the new image, gracefully shut down the existing container, and restart it with the same options that were used when it was deployed initially.</p> <p>For example, let's say you were running Watchtower along with an instance of centurylink/wetty-cli image:</p> List Docker containers<pre><code>docker ps\n</code></pre> Output<pre><code>CONTAINER ID   IMAGE                   STATUS          PORTS                    NAMES\n967848166a45   centurylink/wetty-cli   Up 10 minutes   0.0.0.0:8080-&gt;3000/tcp   wetty\n6cc4d2a9d1a5   nickfedor/watchtower    Up 15 minutes                            watchtower\n</code></pre> <p>Every day Watchtower will pull the latest centurylink/wetty-cli image and compare it to the one that was used to run the \"wetty\" container. If it sees that the image has changed it will stop/remove the \"wetty\" container and then restart it using the new image and the same <code>docker run</code> options that were used to start the container initially (in this case, that would include the <code>-p 8080:3000</code> port mapping).</p>"},{"location":"getting-started/updating-watchtower/","title":"Updating Watchtower","text":"<p>If Watchtower is monitoring the same Docker daemon under which the Watchtower container itself is running (i.e. if you volume-mounted <code>/var/run/docker.sock</code> into the Watchtower container) then it has the ability to update itself.</p> <p>If a new version of the <code>nickfedor/watchtower</code> image is pushed to the Docker Hub, your Watchtower will pull down the new image and restart itself automatically.</p>"},{"location":"getting-started/usage/","title":"Usage","text":""},{"location":"getting-started/usage/#running_watchtower_as_a_docker_container","title":"Running Watchtower as a Docker Container","text":"<p>Watchtower is released as a container image, which makes getting started as simple as pulling the <code>nickfedor/watchtower</code> image.</p> <p>Note</p> <p>If you are using an ARM-based system, then remember to pull the appropriate <code>nickfedor/watchtower:armhf-&lt;tag&gt;</code> image from Docker Hub.</p>"},{"location":"getting-started/usage/#docker_socket_requirement","title":"Docker Socket Requirement","text":"<p>Since Watchtower needs to interact with the Docker API in order to monitor and update containers, you need to mount <code>/var/run/docker.sock</code> to the Watchtower container with the <code>-v</code> flag.</p>"},{"location":"getting-started/usage/#docker_engine_dependency","title":"Docker Engine Dependency","text":"<p>It is recommended to use the latest version of Docker. You can check your host's Docker version using the following CLI command:</p> <pre><code>docker version\n</code></pre> <p>Docker CLI Command Reference</p> <p>Watchtower autonegotiates the API version by default. If the <code>DOCKER_API_VERSION</code> variable is explicitly set, then Watchtower validates the version and falls back to autonegotiation on failure.</p> <p>This version of Watchtower has been tested to support Docker v1.43 and higher. There is an increased probability of failures when using outdated versions of Docker.</p>"},{"location":"getting-started/usage/#running_the_container","title":"Running the Container","text":"<p>Run the <code>watchtower</code> container with the following command:</p> <pre><code>docker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --restart unless-stopped \\\n  nickfedor/watchtower\n</code></pre>"},{"location":"getting-started/usage/#private_registries","title":"Private Registries","text":"<p>If pulling images from private Docker registries, then supply registry authentication credentials with the environment variables <code>REPO_USER</code> and <code>REPO_PASS</code> or by mounting the host's docker config file into the container (at the root of the container filesystem <code>/</code>).</p>"},{"location":"getting-started/usage/#passing_environment_variables","title":"Passing Environment Variables","text":"<pre><code>docker run -d \\\n  --name watchtower \\\n  -e REPO_USER=username \\\n  -e REPO_PASS=password \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --restart unless-stopped \\\n  nickfedor/watchtower container_to_watch --debug\n</code></pre> <p>Also check out this Stack Overflow answer for more options on how to pass environment variables.</p>"},{"location":"getting-started/usage/#docker_hub_credentials","title":"Docker Hub Credentials","text":"<p>Alternatively, if you 2FA authentication setup on Docker Hub, then passing username and password will be insufficient. Instead you can run <code>docker login</code> to store your credentials in <code>$HOME/.docker/config.json</code> and then mount this config file to make it available to the Watchtower container:</p> <pre><code>docker run -d \\\n  --name watchtower \\\n  -v $HOME/.docker/config.json:/config.json \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --restart unless-stopped \\\n  nickfedor/watchtower container_to_watch --debug\n</code></pre> <p>Changes to config.json while running</p> <p>If you mount <code>config.json</code> in the manner above, changes from the host system will (generally) not be propagated to the running container.</p> <p>Mounting files into the Docker daemon uses bind mounts, which are based on inodes.</p> <p>Most applications (including <code>docker login</code> and <code>vim</code>) will not directly edit the file, but instead make a copy and replace the original file, which results in a new inode which in turn breaks the bind mount.</p> <p>As a workaround, you can create a symlink to your <code>config.json</code> file and then mount the symlink in the container. The symlinked file will always have the same inode, which keeps the bind mount intact and will ensure changes to the original file are propagated to the running container (regardless of the inode of the source file!).</p> <p>If you mount the config file as described above, be sure to also prepend the URL for the registry when starting up your watched image (you can omit the https://).</p> <p>Here is a complete docker-compose.yml file that starts up a docker container from a private repo on the GitHub Registry and monitors it with Watchtower. Note the command argument changing the interval to 30s rather than the default 24 hours.</p> <pre><code>version: \"3\"\nservices:\n  cavo:\n    image: ghcr.io/&lt;org&gt;/&lt;image&gt;:&lt;tag&gt;\n    ports:\n      - \"443:3443\"\n      - \"80:3080\"\n  watchtower:\n    image: nickfedor/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /root/.docker/config.json:/config.json\n    command: --interval 30\n</code></pre>"},{"location":"notifications/overview/","title":"Configuration","text":""},{"location":"notifications/overview/#overview","title":"Overview","text":"<p>Watchtower uses Shoutrrr to provide notification functionality. Notifications are sent via hooks in the logrus logging system.</p>"},{"location":"notifications/overview/#enabling_notifications","title":"Enabling Notifications","text":"<p>To send notifications, use the <code>NOTIFICATION URL</code> configuration option to specify the Shoutrrr service URL.</p> <p>The Shoutrrr URL follows the format:</p> <pre><code>&lt;service&gt;://&lt;required-credentials&gt;[:&lt;optional-credentials&gt;]@&lt;required-service&gt;/&lt;required-path&gt;?&lt;key&gt;=&lt;value&gt;&amp;...\n</code></pre> <p>The format is the same for all services, but the parameters, path, and credentials vary between them.</p> <p>The <code>NOTIFICATION URL</code> configuration option can also reference a file, in which case the contents of the file are used.</p>"},{"location":"notifications/overview/#using_multiple_notification_services","title":"Using Multiple Notification Services","text":"<p>The <code>NOTIFICATION URL</code> configuration option can also be used multiple times or use a comma-separated list in the <code>WATCHTOWER_NOTIFICATION_URL</code> environment variable to utilize multiple notification services.</p> <p>Using multiple notifications with environment variables</p> <p>There is currently a bug in Viper (Issue), which prevents comma-separated slices to be used when using the environment variable.</p> <p>A workaround is available where we instead put quotes around the environment variable value and replace the commas with spaces:</p> <pre><code>WATCHTOWER_NOTIFICATIONS=\"slack msteams\"\n</code></pre> <p>If you're a <code>docker-compose</code> user, make sure to specify environment variables' values in your <code>.yml</code> file without double quotes (<code>\"</code>). This prevents unexpected errors when Watchtower starts.</p>"},{"location":"notifications/overview/#startup_notifications","title":"Startup Notifications","text":"<p>Watchtower will log and send a notification every time it is started.</p> <p>This behavior can be disabled with the <code>DISABLE STARTUP MESSAGE</code> configuration option.</p>"},{"location":"notifications/overview/#general_notification_settings","title":"General Notification Settings","text":""},{"location":"notifications/overview/#level","title":"Level","text":"<p>Controls the log level for notifications.</p> <p>Possible values: <code>panic</code>, <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>.</p> <pre><code>            Argument: --notifications-level\nEnvironment Variable: WATCHTOWER_NOTIFICATIONS_LEVEL\n                Type: String\n             Default: info\n</code></pre> <p>Note</p> <p>In legacy mode (<code>--notification-report=false</code>), only <code>info</code>-level logs trigger notifications, ensuring a focused step-by-step update summary.</p>"},{"location":"notifications/overview/#hostname","title":"Hostname","text":"<p>Custom hostname specified in subject/title. Useful for overriding the operating system hostname.</p> <pre><code>            Argument: --notifications-hostname\nEnvironment Variable: WATCHTOWER_NOTIFICATIONS_HOSTNAME\n                Type: String\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#delay","title":"Delay","text":"<p>Delay before sending notifications expressed in seconds.</p> <pre><code>            Argument: --notifications-delay\nEnvironment Variable: WATCHTOWER_NOTIFICATIONS_DELAY\n                Type: Integer\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#title_tag","title":"Title Tag","text":"<p>Prefix to include in the title. Useful when running multiple Watchtower instances.</p> <pre><code>            Argument: --notification-title-tag\nEnvironment Variable: WATCHTOWER_NOTIFICATION_TITLE_TAG\n                Type: String\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#skip_title","title":"Skip Title","text":"<p>Used to not pass the title param to notifications. This will not pass a dynamic title override to notification services. If no title is configured for the service, it will remove the title altogether.</p> <pre><code>            Argument: --notification-skip-title\nEnvironment Variable: WATCHTOWER_NOTIFICATION_SKIP_TITLE\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"notifications/overview/#log_stdout","title":"Log Stdout","text":"<p>Enable output from <code>logger://</code> Shoutrrr service to stdout.</p> <pre><code>            Argument: --notification-log-stdout\nEnvironment Variable: WATCHTOWER_NOTIFICATION_LOG_STDOUT\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"notifications/overview/#email_notifications","title":"Email Notifications","text":"<p>Watchtower uses Shoutrrr's smtp service to send email notifications.</p> <p>Either legacy email notification flags or Shoutrrr URLs can be used; however, directly using URLs is recommended for greater control and clarity, especially for configuring TLS settings (e.g., STARTTLS or Implicit TLS).</p> <p>To send notifications via e-mail, add <code>email</code> to the <code>--notifications</code> option or the <code>WATCHTOWER_NOTIFICATIONS</code> environment variable.</p> <p>Email notification flags (e.g., <code>WATCHTOWER_NOTIFICATION_EMAIL_SERVER</code>, <code>WATCHTOWER_NOTIFICATION_EMAIL_FROM</code>) are automatically converted to a Shoutrrr SMTP URL internally.</p>"},{"location":"notifications/overview/#common_smtp_configurations","title":"Common SMTP Configurations","text":"GmailAWS SESMicrosoft 365Generic (SSL)Generic (Plain) Property Value Port <code>587</code> Encryption <code>ExplicitTLS</code> UseStartTLS <code>Yes</code> <pre><code>smtp://${USER}:${PASSWORD}@smtp.gmail.com:587/?fromaddress=${FROM}&amp;toaddresses=${TO}&amp;encryption=ExplicitTLS&amp;usestarttls=yes&amp;timeout=30s\n</code></pre> <p>Note</p> <p>For Gmail, use an App Password if two-factor authentication is enabled.</p> Property Value Port <code>587</code> Encryption <code>ExplicitTLS</code> UseStartTLS <code>Yes</code> <pre><code>smtp://${USER}:${PASSWORD}@email-smtp.us-east-1.amazonaws.com:587/?fromaddress=${FROM}&amp;toaddresses=${TO}&amp;encryption=ExplicitTLS&amp;usestarttls=yes&amp;timeout=30s\n</code></pre> Property Value Port <code>587</code> Encryption <code>ExplicitTLS</code> UseStartTLS <code>Yes</code> <pre><code>smtp://${USER}:${PASSWORD}@smtp.office365.com:587/?fromaddress=${FROM}&amp;toaddresses=${TO}&amp;encryption=ExplicitTLS&amp;usestarttls=yes&amp;timeout=30s\n</code></pre> Property Value Port <code>465</code> Encryption <code>ImplicitTLS</code> UseStartTLS <code>No</code> <pre><code>smtp://${USER}:${PASSWORD}@smtp.example.com:465/?fromaddress=${FROM}&amp;toaddresses=${TO}&amp;encryption=ImplicitTLS&amp;usestarttls=no&amp;timeout=30s\n</code></pre> Property Value Port <code>25</code> Encryption <code>None</code> UseStartTLS <code>No</code> <pre><code>smtp://${USER}:${PASSWORD}@smtp.example.com:25/?fromaddress=${FROM}&amp;toaddresses=${TO}&amp;encryption=None&amp;usestarttls=no&amp;timeout=30s\n</code></pre>"},{"location":"notifications/overview/#notes","title":"Notes","text":"<ul> <li> <p>Timeout:</p> <ul> <li>The default SMTP timeout is 10 seconds.</li> <li>If you experience timeouts (e.g., <code>failed to send: timed out: using smtp</code>), add <code>&amp;timeout=30s</code> to the URL to allow more time for server responses, especially with proxies or slow networks.</li> </ul> </li> <li> <p>Authentication:</p> <ul> <li>Use <code>&amp;auth=Plain</code> for username/password authentication (default if credentials provided).</li> <li>For OAuth2 (e.g., Gmail with app-specific passwords), use <code>&amp;auth=OAuth2</code>.</li> </ul> </li> <li> <p>Testing:</p> <ul> <li>Install Shoutrrr using one of the various installation methods.</li> <li>Test your URL with the Shoutrrr CLI:   <pre><code>shoutrrr send -u &lt;URL&gt; -m \"Test message\"\n</code></pre></li> </ul> </li> <li> <p>Proxy Issues:</p> <ul> <li>If using a Docker proxy (e.g., <code>tcp://dockerproxy:2375</code>), ensure it allows outbound connections to <code>${SMTP_HOST}:${SMTP_PORT}</code>.</li> <li>Test connectivity with <code>telnet ${SMTP_HOST} ${SMTP_PORT}</code> inside the container.</li> </ul> </li> </ul>"},{"location":"notifications/overview/#example_legacy_email_configuration","title":"Example Legacy Email Configuration","text":"Docker CLIDocker CLI (SMTP Relay)Docker ComposeDocker Compose (SMTP Relay) <pre><code>docker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=email \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_FROM=sender@example.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_TO=recipient@example.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.example.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587 \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=user \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=secret \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_DELAY=10 \\\n  nickfedor/watchtower\n</code></pre> <pre><code>docker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=email \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_FROM=sender@example.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_TO=recipient@example.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER=relay.example.com \\\n  nickfedor/watchtower\n</code></pre> <p>Note</p> <p>This assumes that you already have an SMTP server up and running that you can connect to. If you don't or you want to bring up Watchtower with your own simple SMTP relay, then check out the Docker Compose example.</p> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower:latest\n    environment:\n      WATCHTOWER_NOTIFICATIONS: email\n      WATCHTOWER_NOTIFICATION_EMAIL_FROM: sender@example.com\n      WATCHTOWER_NOTIFICATION_EMAIL_TO: recipient@example.com\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER: smtp.example.com\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT: 587\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER: user\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD: secret\n      WATCHTOWER_NOTIFICATION_EMAIL_DELAY: 10\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower:latest\n    environment:\n      WATCHTOWER_NOTIFICATIONS: email\n      WATCHTOWER_NOTIFICATION_EMAIL_FROM: sender@example.com\n      WATCHTOWER_NOTIFICATION_EMAIL_TO: recipient@example.com\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER: relay.example.com\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre> <p>Note</p> <p>The example assumes that your domain is called <code>example.com</code> and that you are going to use a valid certificate for <code>smtp.example.com</code>.</p> <p>This hostname has to be used as <code>WATCHTOWER_NOTIFICATION_EMAIL_SERVER</code>, otherwise the TLS connection will fail with <code>Failed to send notification email</code> or <code>connection: connection refused</code> errors.</p> <p>We also have to add a network for this setup in order to add an alias to it.</p> <p>If you also want to enable DKIM or other features on the SMTP server, then you will find more information at freinet/postfix-relay</p>"},{"location":"notifications/overview/#legacy_notification_flags","title":"Legacy Notification Flags","text":""},{"location":"notifications/overview/#email_from","title":"Email From","text":"<p>The e-mail address from which notifications will be sent.</p> <pre><code>            Argument: --notification-email-from\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_FROM\n                Type: String\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#email_to","title":"Email To","text":"<p>The e-mail address to which notifications will be sent.</p> <pre><code>            Argument: --notification-email-to\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_TO\n                Type: String\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#email_server","title":"Email Server","text":"<p>The SMTP server (IP or FQDN) to send notifications through.</p> <pre><code>            Argument: --notification-email-server\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_SERVER\n                Type: String\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#email_server_tls_skip_verify","title":"Email Server TLS Skip Verify","text":"<p>Skip verification of the server certificate when using TLS.</p> <pre><code>            Argument: --notification-email-server-tls-skip-verify\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_SERVER_TLS_SKIP_VERIFY\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"notifications/overview/#email_server_user","title":"Email Server User","text":"<p>The username for the SMTP server if it requires authentication.</p> <pre><code>            Argument: --notification-email-server-user\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER\n                Type: String\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#email_server_password","title":"Email Server Password","text":"<p>The password for the SMTP server if it requires authentication.</p> <pre><code>            Argument: --notification-email-server-password\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD\n                Type: String\n             Default: None\n</code></pre> <p>Note</p> <p>This option can also reference a file, in which case the contents of the file are used.</p>"},{"location":"notifications/overview/#email_subject_tag","title":"Email Subject Tag","text":"<p>Subject prefix tag for notifications via mail.</p> <pre><code>            Argument: --notification-email-subjecttag\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_SUBJECTTAG\n                Type: String\n             Default: \"\"\n</code></pre>"},{"location":"notifications/overview/#email_server_port","title":"Email Server Port","text":"<p>The port the SMTP server listens on.</p> <pre><code>            Argument: --notification-email-server-port\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT\n                Type: Integer\n             Default: 25\n</code></pre>"},{"location":"notifications/overview/#email_delay","title":"Email Delay","text":"<p>The delay (in seconds) between sending notifications if multiple containers are updated at once.</p> <pre><code>            Argument: --notification-email-delay\nEnvironment Variable: WATCHTOWER_NOTIFICATION_EMAIL_DELAY\n                Type: Integer\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#transitioning_from_legacy_email_notifications_to_shoutrrr","title":"Transitioning from Legacy Email Notifications to Shoutrrr","text":"<p>Watchtower includes a <code>watchtower notify-upgrade</code> command to convert legacy flags to a Shoutrrr URL.</p> <p>The output is written to a temporary file, which you can copy using:</p> <pre><code>docker cp &lt;CONTAINER&gt;:&lt;FILE_PATH&gt; ./watchtower-notifications.env\n</code></pre>"},{"location":"notifications/overview/#example_walkthrough","title":"Example Walkthrough","text":"<p>Example Legacy Configuration:</p> Docker CLIDocker Compose <pre><code>docker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=email \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.example.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587 \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=user@example.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=secret \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_FROM=sender@example.com \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_TO=recipient@example.com \\\n  nickfedor/watchtower\n</code></pre> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower:latest\n    environment:\n      WATCHTOWER_NOTIFICATIONS: email\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER: smtp.example.com\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT: 587\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER: user@example.com\n      WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD: secret\n      WATCHTOWER_NOTIFICATION_EMAIL_FROM: sender@example.com\n      WATCHTOWER_NOTIFICATION_EMAIL_TO: recipient@example.com\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre> <ol> <li> <p>Run the following CLI command:</p> <pre><code>docker compose exec watchtower watchtower notify-upgrade\n</code></pre> <p>Converted Shoutrrr URL:</p> <pre><code>smtp://user@example.com:secret@smtp.example.com:587/?fromaddress=sender@example.com&amp;toaddresses=recipient@example.com&amp;encryption=ExplicitTLS&amp;usestarttls=yes\n</code></pre> </li> <li> <p>Replace the legacy flags with:</p> </li> </ol> Docker CLIDocker Compose <pre><code>docker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=shoutrrr \\\n  -e WATCHTOWER_NOTIFICATION_URL=smtp://user@example.com:secret@smtp.example.com:587/?fromaddress=sender@example.com&amp;toaddresses=recipient@example.com&amp;encryption=ExplicitTLS&amp;usestarttls=yes \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_DELAY=10 \\\n  -e WATCHTOWER_NOTIFICATION_EMAIL_SUBJECTTAG=Watchtower \\\n  nickfedor/watchtower\n</code></pre> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower:latest\n    environment:\n      WATCHTOWER_NOTIFICATIONS: shoutrrr\n      WATCHTOWER_NOTIFICATION_URL: smtp://user@example.com:secret@smtp.example.com:587/?fromaddress=sender@example.com&amp;toaddresses=recipient@example.com&amp;encryption=ExplicitTLS&amp;usestarttls=yes\n      WATCHTOWER_NOTIFICATION_EMAIL_DELAY: \"10\"\n      WATCHTOWER_NOTIFICATION_EMAIL_SUBJECTTAG: Watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre> <p>Note</p> <p>Avoid using unrecognized flags like <code>WATCHTOWER_NOTIFICATION_EMAIL_SERVER_SSL</code>, as they are ignored and may cause confusion.</p> <p>Use <code>WATCHTOWER_NOTIFICATION_EMAIL_SERVER_TLS_SKIP_VERIFY</code> to disable TLS verification if needed (not recommended for production).</p>"},{"location":"notifications/overview/#slack_notifications","title":"Slack Notifications","text":""},{"location":"notifications/overview/#example_slack_configuration","title":"Example Slack Configuration","text":"Docker CLIDocker Compose <pre><code>docker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=slack \\\n  -e WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=\"https://hooks.slack.com/services/xxx/yyyyyyyyyyyyyyy\" \\\n  -e WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower-server-1 \\\n  -e WATCHTOWER_NOTIFICATION_SLACK_CHANNEL=#my-custom-channel \\\n  nickfedor/watchtower\n</code></pre> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower:latest\n    environment:\n      WATCHTOWER_NOTIFICATIONS: slack\n      WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL: \"https://hooks.slack.com/services/xxx/yyyyyyyyyyyyyyy\"\n      WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER: watchtower-server-1\n      WATCHTOWER_NOTIFICATION_SLACK_CHANNEL: \"#my-custom-channel\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre>"},{"location":"notifications/overview/#slack_configuration_options","title":"Slack Configuration Options","text":"<p>To receive notifications in Slack, add <code>slack</code> to the <code>--notifications</code> option or the <code>WATCHTOWER_NOTIFICATIONS</code> environment variable.</p> <p>Watchtower supports the following Slack-related options:</p>"},{"location":"notifications/overview/#slack_hook_url","title":"Slack Hook URL","text":"<p>The Slack webhook URL for notifications.</p> <pre><code>            Argument: --notification-slack-hook-url\nEnvironment Variable: WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL\n                Type: String\n             Default: None\n</code></pre> <p>Note</p> <p>This option can also reference a file, in which case the contents of the file are used.</p>"},{"location":"notifications/overview/#slack_identifier","title":"Slack Identifier","text":"<p>Custom name under which messages are sent.</p> <pre><code>            Argument: --notification-slack-identifier\nEnvironment Variable: WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER\n                Type: String\n             Default: watchtower\n</code></pre>"},{"location":"notifications/overview/#slack_channel","title":"Slack Channel","text":"<p>A string which overrides the webhook's default channel (optional).</p> <pre><code>            Argument: --notification-slack-channel\nEnvironment Variable: WATCHTOWER_NOTIFICATION_SLACK_CHANNEL\n                Type: String\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#microsoft_teams_notifications","title":"Microsoft Teams Notifications","text":"Docker CLIDocker Compose <pre><code>docker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=msteams \\\n  -e WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL=\"https://outlook.office.com/webhook/xxxxxxxx@xxxxxxx/IncomingWebhook/yyyyyyyy/zzzzzzzzzz\" \\\n  -e WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA=true \\\n  nickfedor/watchtower\n</code></pre> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower:latest\n    environment:\n      WATCHTOWER_NOTIFICATIONS: msteams\n      WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL: \"https://outlook.office.com/webhook/xxxxxxxx@xxxxxxx/IncomingWebhook/yyyyyyyy/zzzzzzzzzz\"\n      WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA: true\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre>"},{"location":"notifications/overview/#microsoft_teams_configuration_options","title":"Microsoft Teams Configuration Options","text":"<p>To receive notifications in Microsoft Teams, add <code>msteams</code> to the <code>--notifications</code> option or the <code>WATCHTOWER_NOTIFICATIONS</code> environment variable.</p> <p>Watchtower supports the following Microsoft Teams-related options:</p>"},{"location":"notifications/overview/#msteams_hook_url","title":"MSTeams Hook URL","text":"<p>The Microsoft Teams webhook URL for notifications.</p> <pre><code>            Argument: --notification-msteams-hook\nEnvironment Variable: WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL\n                Type: String\n             Default: None\n</code></pre> <p>Note</p> <p>This option can also reference a file, in which case the contents of the file are used.</p>"},{"location":"notifications/overview/#msteams_use_log_data","title":"MSTeams Use Log Data","text":"<p>Enable sending keys/values filled by <code>log.WithField</code> or <code>log.WithFields</code> as Microsoft Teams message facts.</p> <pre><code>            Argument: --notification-msteams-data\nEnvironment Variable: WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"notifications/overview/#gotify_notifications","title":"Gotify Notifications","text":"Docker CLIDocker Compose <pre><code>docker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATIONS=gotify \\\n  -e WATCHTOWER_NOTIFICATION_GOTIFY_URL=\"https://my.gotify.tld/\" \\\n  -e WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN=\"SuperSecretToken\" \\\n  -e WATCHTOWER_NOTIFICATION_GOTIFY_TLS_SKIP_VERIFY=true \\\n  nickfedor/watchtower\n</code></pre> <pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower:latest\n    environment:\n      WATCHTOWER_NOTIFICATIONS: gotify\n      WATCHTOWER_NOTIFICATION_GOTIFY_URL: \"https://my.gotify.tld/\"\n      WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN: \"SuperSecretToken\"\n      WATCHTOWER_NOTIFICATION_GOTIFY_TLS_SKIP_VERIFY: true\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre>"},{"location":"notifications/overview/#gotify_configuration_options","title":"Gotify Configuration Options","text":"<p>To push a notification to your Gotify instance, add <code>gotify</code> to the <code>--notifications</code> option or the <code>WATCHTOWER_NOTIFICATIONS</code> environment variable.</p> <p>Watchtower supports the following Gotify-related options:</p>"},{"location":"notifications/overview/#gotify_url","title":"Gotify URL","text":"<p>The URL of the Gotify instance.</p> <pre><code>            Argument: --notification-gotify-url\nEnvironment Variable: WATCHTOWER_NOTIFICATION_GOTIFY_URL\n                Type: String\n             Default: None\n</code></pre>"},{"location":"notifications/overview/#gotify_token","title":"Gotify Token","text":"<p>The app token for the Gotify instance.</p> <pre><code>            Argument: --notification-gotify-token\nEnvironment Variable: WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN\n                Type: String\n             Default: None\n</code></pre> <p>Note</p> <p>This option can also reference a file, in which case the contents of the file are used.</p>"},{"location":"notifications/overview/#gotify_tls_skip_verify","title":"Gotify TLS Skip Verify","text":"<p>Skip verification of the server certificate when using TLS.</p> <pre><code>            Argument: --notification-gotify-tls-skip-verify\nEnvironment Variable: WATCHTOWER_NOTIFICATION_GOTIFY_TLS_SKIP_VERIFY\n                Type: Boolean\n             Default: false\n</code></pre>"},{"location":"notifications/template-preview/","title":"Template Preview","text":"<pre>loading wasm...</pre> Template Input {{- with .Report -}}     {{- if ( or .Updated .Failed ) -}} {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed       {{- range .Updated}} - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}       {{- end -}}       {{- range .Fresh}} - {{.Name}} ({{.ImageName}}): {{.State}}       {{- end -}}       {{- range .Skipped}} - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}       {{- end -}}       {{- range .Failed}} - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}         {{- end -}}     {{- end -}}   {{- end -}}   {{- if (and .Entries .Report) }}  Logs:   {{ end -}}   {{range .Entries -}}{{.Time.Format \"2006-01-02T15:04:05Z07:00\"}} [{{.Level}}] {{.Message}}{{\"\\n\"}}{{- end -}}  Container report          Skipped:                   Scanned:                   Updated:                   Failed:                   Fresh:                   Stale:           Log entries          Error:                   Warning:                   Info:                   Debug:"},{"location":"notifications/templates/","title":"Templates","text":""},{"location":"notifications/templates/#overview","title":"Overview","text":"<p>You can customize the message posted by setting a notification template.</p>"},{"location":"notifications/templates/#notification_template","title":"Notification Template","text":"<p>Sets the Go template used for formatting notification messages.</p> <pre><code>            Argument: --notification-template\nEnvironment Variable: WATCHTOWER_NOTIFICATION_TEMPLATE\n                Type: String\n             Default: See default templates below\n</code></pre>"},{"location":"notifications/templates/#notification_report","title":"Notification Report","text":"<p>Enables the session report as the notification template data, including container statuses and logs.</p> <pre><code>            Argument: --notification-report\nEnvironment Variable: WATCHTOWER_NOTIFICATION_REPORT\n                Type: Boolean\n             Default: false\n</code></pre> <p>The template is a Go template that processes either a list of Logrus log entries or a <code>notifications.Data</code> struct, depending on the <code>--notification-report</code> flag.</p>"},{"location":"notifications/templates/#simple_templates","title":"Simple Templates","text":"<p>Simple templates are used when <code>--notification-report</code> is not set, formatting individual log entries as they occur.</p> Default Simple Template<pre><code>{{- range $i, $e := . -}}\n{{- if $i}}{{- println -}}{{- end -}}\n{{- $msg := $e.Message -}}\n{{- if eq $msg \"Found new image\" -}}\n    Found new image: {{$e.Data.image}} ({{with $e.Data.new_id}}{{.}}{{else}}unknown{{end}})\n{{- else if eq $msg \"Stopping container\" -}}\n    Stopped stale container: {{$e.Data.container}} ({{with $e.Data.id}}{{.}}{{else}}unknown{{end}})\n{{- else if eq $msg \"Started new container\" -}}\n    Started new container: {{$e.Data.container}} ({{with $e.Data.new_id}}{{.}}{{else}}unknown{{end}})\n{{- else if eq $msg \"Removing image\" -}}\n    Removed stale image: {{with $e.Data.image_id}}{{.}}{{else}}unknown{{end}}\n{{- else if $e.Data -}}\n    {{$msg}} | {{range $k, $v := $e.Data -}}{{$k}}={{$v}} {{- end}}\n{{- else -}}\n    {{$msg}}\n{{- end -}}\n{{- end -}}\n</code></pre> <ul> <li>This template processes <code>info</code>-level log entries in real-time, formatting key update events in past tense with container and image details from <code>logrus</code> fields.</li> <li>It sends each event immediately in legacy mode, mimicking a step-by-step log.</li> </ul>"},{"location":"notifications/templates/#using_simple_templates_in_the_preview_tool","title":"Using Simple Templates in the Preview Tool","text":"<p>The Template Preview Tool uses a <code>notifications.Data</code> struct with <code>.Entries</code> as the log list.</p> <p>Note</p> <p>To use the simple template in the preview tool, modify the range to <code>{{- range $i, $e := .Entries -}}</code> to match the data structure.</p> Example Simple Template for the Template Preview Tool<pre><code>{{- range $i, $e := .Entries -}}\n{{- if $i}}{{- println -}}{{- end -}}\n{{- $msg := $e.Message -}}\n{{- if eq $msg \"Found new image\" -}}\n    Found new image: {{$e.Data.image}} ({{with $e.Data.new_id}}{{.}}{{else}}unknown{{end}})\n{{- else if eq $msg \"Stopping container\" -}}\n    Stopped stale container: {{$e.Data.container}} ({{with $e.Data.id}}{{.}}{{else}}unknown{{end}})\n{{- else if eq $msg \"Started new container\" -}}\n    Started new container: {{$e.Data.container}} ({{with $e.Data.new_id}}{{.}}{{else}}unknown{{end}})\n{{- else if eq $msg \"Removing image\" -}}\n    Removed stale image: {{with $e.Data.image_id}}{{.}}{{else}}unknown{{end}}\n{{- else if $e.Data -}}\n    {{$msg}} | {{range $k, $v := $e.Data -}}{{$k}}={{$v}} {{- end}}\n{{- else -}}\n    {{$msg}}\n{{- end -}}\n{{- end -}}\n</code></pre> <p>Example output for a log entry with <code>msg=\"Found new image\"</code>:</p> <pre><code>Found new image: repo/image:latest (abcdef123456)\n</code></pre>"},{"location":"notifications/templates/#report_templates","title":"Report Templates","text":"<p>When <code>--notification-report</code> is set, the template processes a <code>notifications.Data</code> struct containing a session report and log entries.</p> Default Report Template<pre><code>{{- if .Report -}}\n  {{- with .Report -}}\n    {{- if ( or .Updated .Failed ) -}}\n{{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed\n      {{- range .Updated}}\n- {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}\n      {{- end -}}\n      {{- range .Fresh}}\n- {{.Name}} ({{.ImageName}}): {{.State}}\n      {{- end -}}\n      {{- range .Skipped}}\n- {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n      {{- end -}}\n      {{- range .Failed}}\n- {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n      {{- end -}}\n    {{- end -}}\n  {{- end -}}\n{{- if .Entries -}}\n\nLogs:\n{{- end -}}\n{{range .Entries -}}{{.Time.Format \"2006-01-02T15:04:05Z07:00\"}} [{{.Level}}] {{.Message}}{{\"\\n\"}}{{- end -}}\n</code></pre> <ul> <li>This template generates a summary of container statuses (scanned, updated, failed, etc.) followed by logs, used for notifications like email or Slack messages.</li> </ul>"},{"location":"notifications/templates/#example_usage","title":"Example Usage","text":"Docker CLIDocker Compose <pre><code>docker run -d \\\n  --name watchtower \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -e WATCHTOWER_NOTIFICATION_REPORT=\"true\" \\\n  -e WATCHTOWER_NOTIFICATION_TEMPLATE=\"\\\n{{- if .Report -}}\n  {{- with .Report -}}\n{{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed\n      {{- range .Updated}}\n- {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}\n      {{- end -}}\n      {{- range .Fresh}}\n- {{.Name}} ({{.ImageName}}): {{.State}}\n      {{- end -}}\n      {{- range .Skipped}}\n- {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n      {{- end -}}\n      {{- range .Failed}}\n- {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n      {{- end -}}\n  {{- end -}}\n{{- if .Entries -}}\n\nLogs:\n{{- end -}}\n{{range .Entries -}}{{.Time.Format \\\"2006-01-02T15:04:05Z07:00\\\"}} [{{.Level}}] {{.Message}}{{\\\"\\n\\\"}}{{- end -}}\n\" \\\n  watchtower-image\n</code></pre> <pre><code>services:\n  watchtower:\n    image: watchtower-image\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      WATCHTOWER_NOTIFICATION_REPORT: \"true\"\n      WATCHTOWER_NOTIFICATION_URL: &gt;\n        discord://token@channel\n        slack://watchtower@token-a/token-b/token-c\n      WATCHTOWER_NOTIFICATION_TEMPLATE: |\n        {{- if .Report -}}\n          {{- with .Report -}}\n        {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed\n            {{- range .Updated}}\n        - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}\n            {{- end -}}\n            {{- range .Fresh}}\n        - {{.Name}} ({{.ImageName}}): {{.State}}\n            {{- end -}}\n            {{- range .Skipped}}\n        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n            {{- end -}}\n            {{- range .Failed}}\n        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}\n            {{- end -}}\n          {{- end -}}\n        {{- if .Entries -}}\n\n        Logs:\n        {{- end -}}\n        {{range .Entries -}}{{.Time.Format \"2006-01-02T15:04:05Z07:00\"}} [{{.Level}}] {{.Message}}{{\"\\n\"}}{{- end -}}\n</code></pre> <p>Example output for a session with one updated container and one error log:</p> <pre><code>5 Scanned, 1 Updated, 0 Failed\n- /container (repo/image:latest): abcdef12 updated to 34567890\n\nLogs:\n2025-08-20T06:00:13-07:00 [error] Operation failed. Try again later.\n</code></pre>"},{"location":"notifications/templates/#customizing_templates","title":"Customizing Templates","text":"<p>You can create custom templates to format notifications differently.</p> <p>Use the Template Preview Tool to test your templates interactively.</p> <p>Note</p> <p>When testing simple templates in the preview tool, ensure the range iterates over <code>.Entries</code> (e.g., <code>{{- range $i, $e := .Entries -}}</code>) to match the <code>notifications.Data</code> struct.</p>"},{"location":"notifications/templates/#additional_resources","title":"Additional Resources","text":"<ul> <li>For detailed template syntax, refer to the Go Template documentation.</li> <li>For log entry fields, see the Logrus Entry documentation.</li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#overview","title":"Overview","text":"<p>Despite offering extensive configuration options, Watchtower's default settings are suitable for most deployments. If you need to modify the configuration, then review the available documentation.</p>"},{"location":"quickstart/#docker_cli","title":"Docker CLI","text":"<p>Docker Run CLI Reference</p> Pull and run Watchtower<pre><code>docker run -d \\\n  --name watchtower \\\n  --restart unless-stopped \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  nickfedor/watchtower\n</code></pre>"},{"location":"quickstart/#docker_compose","title":"Docker Compose","text":"<p>Docker Compose File Reference</p> <ol> <li> <p>Obtain the example Docker Compose file:</p> Download via PowerShell (Windows)Download via Bash (Linux)Copy <pre><code>iwr -Uri https://raw.githubusercontent.com/nicholas-fedor/watchtower/refs/heads/main/examples/default/docker-compose.yaml -OutFile docker-compose.yaml\n</code></pre> <pre><code>curl -L https://raw.githubusercontent.com/nicholas-fedor/watchtower/refs/heads/main/examples/default/docker-compose.yaml -o docker-compose.yaml\n</code></pre> docker-compose.yaml<pre><code>services:\n  watchtower:\n    image: nickfedor/watchtower:latest\n    restart: unless-stopped\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre> </li> <li> <p>Run the Compose file:</p> <pre><code>docker compose up -d\n</code></pre> </li> </ol>"},{"location":"quickstart/#expected_behavior","title":"Expected Behavior","text":"<p>When running Watchtower with its default settings:</p> <ul> <li>It will monitor all running containers on the host</li> <li>Every 24 hours, it will poll if the monitored containers have updated image digests</li> </ul> <p>If an updated image digest is detected, then Watchtower will:</p> <ul> <li>Pull the updated container image</li> <li>Perform a graceful shutdown of the target container and its dependencies</li> <li>Start a new container with the updated image while maintaining the previous container's configuration</li> </ul>"}]}